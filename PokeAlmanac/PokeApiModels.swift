//
//  PokeApiModels.swift
//  PokeAlmanac
//
//  Created by 倉重ゴルプ　ダニエル on 2016/04/18.
//  Copyright © 2016年 Daniel Kurashige-Gollub. All rights reserved.
//

// Notes:
//
// - Large parts of this code were generated by a Python script.
// - Only a subset of the API is used right now, because of time constraints.
//

import Foundation
import JSONJoy


// NOTE(dkg): changed struct to class because of memory pressure, as structs are copied by value at all times

public class APIID : JSONJoy {
    public let id: Int
    
    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
    }
}


public class APIResource : JSONJoy {
    public let url: String   // The URL of the referenced resource
    
    public required init(_ decoder: JSONDecoder) throws {
        url = try decoder["url"].getString()
    }
}

public class APIResourceList : JSONJoy {
    public let count: Int   // The total number of resources abailable from this API
    public let next: String?   // The url for the next 'page' in the list
    public let previous: String?   // The url for the previous page in the list
    public let results: [APIResource]   // I list of unnamed API resources
    
    public required init(_ decoder: JSONDecoder) throws {
        count = try decoder["count"].getInt()
        next = decoder["next"].string
        previous = decoder["previous"].string
        
        guard let tmpResults = decoder["results"].array else { throw JSONError.WrongType }
        var collectResults = [APIResource]()
        for tmpDecoder in tmpResults {
            collectResults.append(try APIResource(tmpDecoder))
        }
        results = collectResults
    }
}

public class NamedAPIResourceList : JSONJoy {
    public let count: Int   // The total number of resources abailable from this API
    public let next: String?   // The url for the next 'page' in the list
    public let previous: String?   // The url for the previous page in the list
    public let results: [NamedAPIResource]   // I list of named API resources
    
    public required init(_ decoder: JSONDecoder) throws {
        count = try decoder["count"].getInt()
        next = decoder["next"].string
        previous = decoder["previous"].string
        
        guard let tmpResults = decoder["results"].array else { throw JSONError.WrongType }
        var collectResults = [NamedAPIResource]()
        for tmpDecoder in tmpResults {
            collectResults.append(try NamedAPIResource(tmpDecoder))
        }
        results = collectResults  
    }
}

public class NamedAPIResource : JSONJoy {
    public let name: String   // The name of the referenced resource
    public let url: String   // The URL of the referenced resource
    
    public required init(_ decoder: JSONDecoder) throws {
        name = try decoder["name"].getString()
        url = try decoder["url"].getString()
    }
}

public class Name : JSONJoy {
    public let name: String   // The localized name for an API resource in a specific language
    public let language: NamedAPIResource   // The language this name is in
    
    public required init(_ decoder: JSONDecoder) throws {
        name = try decoder["name"].getString()
        language = try NamedAPIResource(decoder["language"])
    }
}

public class Pokemon : JSONJoy {
    public let id: Int   // The identifier for this Pokémon resource
    public let name: String   // The name for this Pokémon resource
    public let base_experience: Int   // The base experience gained for defeating this Pokémon
    public let height: Int   // The height of this Pokémon
    public let is_default: Bool   // Set for exactly one Pokémon used as the default for each species
    public let order: Int   // Order for sorting. Almost national order, except families are grouped together.
    public let weight: Int   // The weight of this Pokémon
    public let abilities: [PokemonAbility]   // A list of abilities this Pokémon could potentially have
    public let forms: [NamedAPIResource] // [PokemonForm]   // A list of forms this Pokémon can take on -- this is a NamedAPIResourceList!!!
    public let game_indices: [VersionGameIndex]   // A list of game indices relevent to Pokémon item by generation
//    public let held_items: [Item]   // A list of items this Pokémon may be holding when encountered
//    public let location_area_encounters: [LocationAreaEncounter]   // A list of location areas as well as encounter details pertaining to specific versions
    public let moves: [MoveShortInfo] // [Move]?   // A list of moves along with learn methods and level details pertaining to specific version groups
    public let sprites: PokemonSprites   // A set of sprites used to depict this Pokémon in the game
    public let species: NamedAPIResource // PokemonSpecies   // The species this Pokémon belongs to
//    public let stats: [Stat]   // A list of base stat values for this Pokémon
    public let types: [PokemonType]   // A list of details showing types this Pokémon has
    
    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        base_experience = try decoder["base_experience"].getInt()
        height = try decoder["height"].getInt()
        is_default = decoder["is_default"].bool
        order = try decoder["order"].getInt()
        weight = try decoder["weight"].getInt()
        
        guard let tmpAbilities = decoder["abilities"].array else { throw JSONError.WrongType }
        var collectAbilities = [PokemonAbility]()
        for tmpDecoder in tmpAbilities {
            collectAbilities.append(try PokemonAbility(tmpDecoder))
        }
        abilities = collectAbilities

        guard let tmpForms = decoder["forms"].array else { throw JSONError.WrongType }
        var collectForms = [NamedAPIResource]()
        for tmpDecoder in tmpForms {
            collectForms.append(try NamedAPIResource(tmpDecoder))
        }
        forms = collectForms
        
        guard let tmpGame_indices = decoder["game_indices"].array else { throw JSONError.WrongType }
        var collectGame_indices = [VersionGameIndex]()
        for tmpDecoder in tmpGame_indices {
            collectGame_indices.append(try VersionGameIndex(tmpDecoder))
        }
        game_indices = collectGame_indices
        
//        
//        guard let tmpHeld_items = decoder["held_items"].array else { throw JSONError.WrongType }
//        var collectHeld_items = [Item]()
//        for tmpDecoder in tmpHeld_items {
//            collectHeld_items.append(try Item(tmpDecoder))
//        }
//        held_items = collectHeld_items
//        
//        
//        guard let tmpLocation_area_encounters = decoder["location_area_encounters"].array else { throw JSONError.WrongType }
//        var collectLocation_area_encounters = [LocationAreaEncounter]()
//        for tmpDecoder in tmpLocation_area_encounters {
//            collectLocation_area_encounters.append(try LocationAreaEncounter(tmpDecoder))
//        }
//        location_area_encounters = collectLocation_area_encounters
        
        guard let tmpMoves = decoder["moves"].array else { throw JSONError.WrongType }
        var collectMoves = [MoveShortInfo]()
        for tmpDecoder in tmpMoves {
            collectMoves.append(try MoveShortInfo(tmpDecoder))
        }
        moves = collectMoves
       
        sprites = try PokemonSprites(decoder["sprites"])
//        species = try PokemonSpecies(decoder["species"])
        species = try NamedAPIResource(decoder["species"])
//        
//        guard let tmpStats = decoder["stats"].array else { throw JSONError.WrongType }
//        var collectStats = [Stat]()
//        for tmpDecoder in tmpStats {
//            collectStats.append(try Stat(tmpDecoder))
//        }
//        stats = collectStats
        
        
        guard let tmpTypes = decoder["types"].array else { throw JSONError.WrongType }
        var collectTypes = [PokemonType]()
        for tmpDecoder in tmpTypes {
            collectTypes.append(try PokemonType(tmpDecoder))
        }
        types = collectTypes
        
    }
}

public class PokemonAbility : JSONJoy {
    public let is_hidden: Bool   // Whether or not this is a hidden ability
    public let slot: Int   // The slot this ability occupies in this Pokémon species
//    public let ability: Ability   // The ability the Pokémon may have
    
    public required init(_ decoder: JSONDecoder) throws {
        is_hidden = decoder["is_hidden"].bool
        slot = try decoder["slot"].getInt()
//        ability = try Ability(decoder["ability"])
    }
}

public class PokemonType : JSONJoy {
    public let slot: Int   // The order the Pokémon's types are listed in
    public let type: NamedAPIResource   // The type the referenced Pokémon has
    
    public required init(_ decoder: JSONDecoder) throws {
        slot = try decoder["slot"].getInt()
        type = try NamedAPIResource(decoder["type"])
    }
}

public class PokemonSprites : JSONJoy {
    public let front_default: String?   // The default depiction of this Pokémon from the front in battle
    public let front_shiny: String?   // The shiny depiction of this Pokémon from the front in battle
    public let front_female: String?   // The female depiction of this Pokémon from the front in battle
    public let front_shiny_female: String?   // The shiny female depiction of this Pokémon from the front in battle
    public let back_default: String?   // The default depiction of this Pokémon from the back in battle
    public let back_shiny: String?   // The shiny depiction of this Pokémon from the back in battle
    public let back_female: String?   // The female depiction of this Pokémon from the back in battle
    public let back_shiny_female: String?   // The shiny female depiction of this Pokémon from the back in battle
    
    public required init(_ decoder: JSONDecoder) throws {
        front_default = decoder["front_default"].string
        front_shiny = decoder["front_shiny"].string
        front_female = decoder["front_female"].string
        front_shiny_female = decoder["front_shiny_female"].string
        back_default = decoder["back_default"].string
        back_shiny = decoder["back_shiny"].string
        back_female = decoder["back_female"].string
        back_shiny_female = decoder["back_shiny_female"].string
    }
}

public class PokemonForm : JSONJoy {
    public let id: Int   // The identifier for this Pokémon form resource
    public let name: String   // The name for this Pokémon form resource
    public let order: Int   // The order in which forms should be sorted within all forms. Multiple forms may have equal order, in which case they should fall back on sorting by name.
    public let form_order: Int   // The order in which forms should be sorted within a species' forms
    public let is_default: Bool   // True for exactly one form used as the default for each Pokémon
    public let is_battle_only: Bool   // Whether or not this form can only happen during battle
    public let is_mega: Bool   // Whether or not this form requires mega evolution
    public let form_name: String   // The name of this form
    public let pokemon: NamedAPIResource   // The Pokémon that can take on this form
    public let sprites: PokemonFormSprites   // A set of sprites used to depict this Pokémon form in the game
//    public let version_group: VersionGroup   // The version group this Pokémon form was introduced in
    
    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        order = try decoder["order"].getInt()
        form_order = try decoder["form_order"].getInt()
        is_default = decoder["is_default"].bool
        is_battle_only = decoder["is_battle_only"].bool
        is_mega = decoder["is_mega"].bool
        form_name = try decoder["form_name"].getString()
        pokemon = try NamedAPIResource(decoder["pokemon"])
        sprites = try PokemonFormSprites(decoder["sprites"])
//        version_group = try VersionGroup(decoder["version_group"])
    }
}

public class PokemonFormSprites : JSONJoy {
    public let front_default: String   // The default depiction of this Pokémon form from the front in battle
    public let front_shiny: String   // The shiny depiction of this Pokémon form from the front in battle
    public let back_default: String   // The default depiction of this Pokémon form from the back in battle
    public let back_shiny: String   // The shiny depiction of this Pokémon form from the back in battle
    
    public required init(_ decoder: JSONDecoder) throws {
        front_default = try decoder["front_default"].getString()
        front_shiny = try decoder["front_shiny"].getString()
        back_default = try decoder["back_default"].getString()
        back_shiny = try decoder["back_shiny"].getString()
    }
}

public class VersionGameIndex : JSONJoy {
    public let game_index: Int   // The internal id of an API resource within game data
    public let version: NamedAPIResource   // The version relevent to this game index
    
    public required init(_ decoder: JSONDecoder) throws {
        game_index = try decoder["game_index"].getInt()
        version = try NamedAPIResource(decoder["version"])
    }
}

public class Version : JSONJoy {
    public let id: Int   // The identifier for this version resource
    public let name: String   // The name for this version resource
//    public let names: [Name]   // The name of this version listed in different languages
//    public let version_group: VersionGroup   // The version group this version belongs to
    
    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
//        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
//        var collectNames = [Name]()
//        for tmpDecoder in tmpNames {
//            collectNames.append(try Name(tmpDecoder))
//        }
//        names = collectNames
        
//        version_group = try VersionGroup(decoder["version_group"])
    }
}

public class MoveShortInfo : JSONJoy {
    public let move: NamedAPIResource
    public var version_group_details: [VersionGroup]?
    
    public required init(_ decoder: JSONDecoder) throws {
        move = try NamedAPIResource(decoder["move"])
        // TODO(dkg): version_group_details
    }
}

public class Move : JSONJoy {
    public let id: Int   // The identifier for this move resource
    public let name: String   // The name for this move resource
    public let accuracy: Int?   // The percent value of how likely this move is to be successful
    public let effect_chance: Int?   // The percent value of how likely it is this moves effect will happen
    public let pp: Int   // Power points. The number of times this move can be used
    public let priority: Int   // A value between -8 and 8. Sets the order in which moves are executed during battle. See Bulbapedia for greater detail.
    public let power: Int?   // The base power of this move with a value of 0 if it does not have a base power
//    public let contest_combos: [ContestComboSets]   // A detail of normal and super contest combos that require this move
//    public let contest_type: ContestType   // The type of appeal this move gives a Pokémon when used in a contest
//    public let contest_effect: ContestEffect   // The effect the move has when used in a contest
//    public let damage_class: MoveDamageClass   // The type of damage the move inflicts on the target, e.g. physical
    public let effect_entries: [VerboseEffect]   // The effect of this move listed in different languages
//    public let effect_changes: [AbilityEffectChange]   // The list of previous effects this move has had across version groups of the games
//    public let generation: Generation   // The generation in which this move was introduced
//    public let meta: MoveMetaData   // Metadata about this move
    public let names: [Name]   // The name of this move listed in different languages
//    public let past_values: [PastMoveStatValues]   // A list of move resource value changes across ersion groups of the game
//    public let stat_changes: [MoveStatChange]   // A list of stats this moves effects and how much it effects them
//    public let contest_effect: ContestEffect   // The effect the move has when used in a super contest
//    public let target: MoveTarget   // The type of target that will recieve the effects of the attack
//    public let type: Type   // The elemental type of this move
    
    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        accuracy = decoder["accuracy"].integer
        effect_chance = decoder["effect_chance"].integer
        pp = try decoder["pp"].getInt()
        priority = try decoder["priority"].getInt()
        power = decoder["power"].integer
        
//        guard let tmpContest_combos = decoder["contest_combos"].array else { throw JSONError.WrongType }
//        var collectContest_combos = [ContestComboSets]()
//        for tmpDecoder in tmpContest_combos {
//            collectContest_combos.append(try ContestComboSets(tmpDecoder))
//        }
//        contest_combos = collectContest_combos
//        
//        contest_type = try ContestType(decoder["contest_type"])
//        contest_effect = try ContestEffect(decoder["contest_effect"])
//        damage_class = try MoveDamageClass(decoder["damage_class"])
        
        guard let tmpEffect_entries = decoder["effect_entries"].array else { throw JSONError.WrongType }
        var collectEffect_entries = [VerboseEffect]()
        for tmpDecoder in tmpEffect_entries {
            collectEffect_entries.append(try VerboseEffect(tmpDecoder))
        }
        effect_entries = collectEffect_entries
//
//        guard let tmpEffect_changes = decoder["effect_changes"].array else { throw JSONError.WrongType }
//        var collectEffect_changes = [AbilityEffectChange]()
//        for tmpDecoder in tmpEffect_changes {
//            collectEffect_changes.append(try AbilityEffectChange(tmpDecoder))
//        }
//        effect_changes = collectEffect_changes
//        
//        generation = try Generation(decoder["generation"])
//        meta = try decoder["meta"].MoveMetaData
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

//        
//        guard let tmpPast_values = decoder["past_values"].array else { throw JSONError.WrongType }
//        var collectPast_values = [PastMoveStatValues]()
//        for tmpDecoder in tmpPast_values {
//            collectPast_values.append(try PastMoveStatValues(tmpDecoder))
//        }
//        past_values = collectPast_values
//        
//        
//        guard let tmpStat_changes = decoder["stat_changes"].array else { throw JSONError.WrongType }
//        var collectStat_changes = [MoveStatChange]()
//        for tmpDecoder in tmpStat_changes {
//            collectStat_changes.append(try MoveStatChange(tmpDecoder))
//        }
//        stat_changes = collectStat_changes
//        
//        contest_effect = try ContestEffect(decoder["contest_effect"])
//        target = try MoveTarget(decoder["target"])
//        type = try Type(decoder["type"])
    }
}

public class VersionGroup : JSONJoy {
    public let id: Int   // The identifier for this version group resource
    public let name: String   // The name for this version group resource
    public let order: Int   // Order for sorting. Almost by date of release, except similar versions are grouped together.
//    public var generation: [Generation]?   // The generation this version was introduced in
//    public var move_learn_methods: [NamedAPIResource]?   // A list of methods in which Pokémon can learn moves in this version group
//    public var names: [Name]?   // The name of this version group listed in different languages
//    public var pokedexes: [Pokedex]?   // A list of Pokédexes introduces in this version group
//    public var regions: [Region]?   // A list of regions that can be visited in this version group
    public var versions: [Version]?   // The versions this version group owns
    
    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        order = try decoder["order"].getInt()
//        
//        guard let tmpGeneration = decoder["generation"].array else { throw JSONError.WrongType }
//        var collectGeneration = [Generation]()
//        for tmpDecoder in tmpGeneration {
//            collectGeneration.append(try Generation(tmpDecoder))
//        }
//        generation = collectGeneration
//        
//        
//        guard let tmpMove_learn_methods = decoder["move_learn_methods"].array else { throw JSONError.WrongType }
//        var collectMove_learn_methods = [MoveLearnMethod]()
//        for tmpDecoder in tmpMove_learn_methods {
//            collectMove_learn_methods.append(try MoveLearnMethod(tmpDecoder))
//        }
//        move_learn_methods = collectMove_learn_methods
//        
//        
//        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
//        var collectNames = [Name]()
//        for tmpDecoder in tmpNames {
//            collectNames.append(try Name(tmpDecoder))
//        }
//        names = collectNames
//        
//        
//        guard let tmpPokedexes = decoder["pokedexes"].array else { throw JSONError.WrongType }
//        var collectPokedexes = [Pokedex]()
//        for tmpDecoder in tmpPokedexes {
//            collectPokedexes.append(try Pokedex(tmpDecoder))
//        }
//        pokedexes = collectPokedexes
//        
//        
//        guard let tmpRegions = decoder["regions"].array else { throw JSONError.WrongType }
//        var collectRegions = [Region]()
//        for tmpDecoder in tmpRegions {
//            collectRegions.append(try Region(tmpDecoder))
//        }
//        regions = collectRegions
//        
//        
//        guard let tmpVersions = decoder["versions"].array else { throw JSONError.WrongType }
//        var collectVersions = [Version]()
//        for tmpDecoder in tmpVersions {
//            collectVersions.append(try Version(tmpDecoder))
//        }
//        versions = collectVersions
        
    }
}


public class PokemonSpecies : JSONJoy {
    public let id: Int   // The identifier for this Pokémon species resource
    public let name: String   // The name for this Pokémon species resource
    public let order: Int   // The order in which species should be sorted. Based on National Dex order, except families are grouped together and sorted by stage.
    public let gender_rate: Int   // The chance of this Pokémon being female, in eighths; or -1 for genderless
    public let capture_rate: Int   // The base capture rate; up to 255. The higher the number, the easier the catch.
    public let base_happiness: Int   // The happiness when caught by a normal Pokéball; up to 255. The higher the number, the happier the Pokémon.
    public let is_baby: Bool   // Whether or not this is a baby Pokémon
    public let hatch_counter: Int   // Initial hatch counter: one must walk 255 × (hatch_counter + 1) steps before this Pokémon's egg hatches, unless utilizing bonuses like Flame Body's
    public let has_gender_differences: Bool   // Whether or not this Pokémon can have different genders
    public let forms_switchable: Bool   // Whether or not this Pokémon has multiple forms and can switch between them
//    public let growth_rate: GrowthRate   // The rate at which this Pokémon species gains levels
//    public let pokedex_numbers: [PokemonSpeciesDexEntry]   // A list of pokedexes and the indexes reserved within them for this Pokémon species
//    public let egg_groups: [EggGroup]   // A list of egg groups this Pokémon species is a member of
//    public let color: [PokemonColor]   // The color of this Pokémon for gimmicky Pokédex search
//    public let shape: [PokemonShape]   // The shape of this Pokémon for gimmicky Pokédex search
//    public let evolves_from_species: PokemonSpecies   // The Pokémon species that evolves into this pokemon_species
//    public let evolution_chain: APIResource (EvolutionChain)   // The evolution chain this Pokémon species is a member of
//    public let habitat: PokemonHabitat   // The habitat this Pokémon species can be encountered in
//    public let generation: Generation   // The generation this Pokémon species was introduced in
//    public let names: [Name]   // The name of this Pokémon species listed in different languages
//    public let pal_park_encounters: [PalParkEncounterArea]   // A list of encounters that can be had with this Pokémon species in pal park
    public let flavor_text_entries: [PokemonSpeciesFlavorText]   // The flavor text of this flavor text listed in different languages
//    public let form_descriptions: [Description]   // Descriptions of different forms Pokémon take on within the Pokémon species
//    public let genera: Genus   // The genus of this Pokémon species listed in multiple languages
//    public let varieties: [Pokemon]   // A list of the Pokémon that exist within this Pokémon species
    
    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        order = try decoder["order"].getInt()
        gender_rate = try decoder["gender_rate"].getInt()
        capture_rate = try decoder["capture_rate"].getInt()
        base_happiness = try decoder["base_happiness"].getInt()
        is_baby = decoder["is_baby"].bool
        hatch_counter = try decoder["hatch_counter"].getInt()
        has_gender_differences = decoder["has_gender_differences"].bool
        forms_switchable = decoder["forms_switchable"].bool
//        growth_rate = try GrowthRate(decoder["growth_rate"])
//        
//        guard let tmpPokedex_numbers = decoder["pokedex_numbers"].array else { throw JSONError.WrongType }
//        var collectPokedex_numbers = [PokemonSpeciesDexEntry]()
//        for tmpDecoder in tmpPokedex_numbers {
//            collectPokedex_numbers.append(try PokemonSpeciesDexEntry(tmpDecoder))
//        }
//        pokedex_numbers = collectPokedex_numbers
//        
//        
//        guard let tmpEgg_groups = decoder["egg_groups"].array else { throw JSONError.WrongType }
//        var collectEgg_groups = [EggGroup]()
//        for tmpDecoder in tmpEgg_groups {
//            collectEgg_groups.append(try EggGroup(tmpDecoder))
//        }
//        egg_groups = collectEgg_groups
//        
//        
//        guard let tmpColor = decoder["color"].array else { throw JSONError.WrongType }
//        var collectColor = [PokemonColor]()
//        for tmpDecoder in tmpColor {
//            collectColor.append(try PokemonColor(tmpDecoder))
//        }
//        color = collectColor
//        
//        
//        guard let tmpShape = decoder["shape"].array else { throw JSONError.WrongType }
//        var collectShape = [PokemonShape]()
//        for tmpDecoder in tmpShape {
//            collectShape.append(try PokemonShape(tmpDecoder))
//        }
//        shape = collectShape
//        
//        evolves_from_species = try PokemonSpecies(decoder["evolves_from_species"])
//        evolution_chain = try decoder["evolution_chain"].APIResource (EvolutionChain)
//        habitat = try PokemonHabitat(decoder["habitat"])
//        generation = try Generation(decoder["generation"])
//        
//        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
//        var collectNames = [Name]()
//        for tmpDecoder in tmpNames {
//            collectNames.append(try Name(tmpDecoder))
//        }
//        names = collectNames
//        
//        
//        guard let tmpPal_park_encounters = decoder["pal_park_encounters"].array else { throw JSONError.WrongType }
//        var collectPal_park_encounters = [PalParkEncounterArea]()
//        for tmpDecoder in tmpPal_park_encounters {
//            collectPal_park_encounters.append(try PalParkEncounterArea(tmpDecoder))
//        }
//        pal_park_encounters = collectPal_park_encounters
//        
//        
        guard let tmpFlavor_text_entries = decoder["flavor_text_entries"].array else { throw JSONError.WrongType }
        var collectFlavor_text_entries = [PokemonSpeciesFlavorText]()
        for tmpDecoder in tmpFlavor_text_entries {
            collectFlavor_text_entries.append(try PokemonSpeciesFlavorText(tmpDecoder))
        }
        flavor_text_entries = collectFlavor_text_entries
//
//        
//        guard let tmpForm_descriptions = decoder["form_descriptions"].array else { throw JSONError.WrongType }
//        var collectForm_descriptions = [Description]()
//        for tmpDecoder in tmpForm_descriptions {
//            collectForm_descriptions.append(try Description(tmpDecoder))
//        }
//        form_descriptions = collectForm_descriptions
//        
//        genera = try decoder["genera"].Genus
//        
//        guard let tmpVarieties = decoder["varieties"].array else { throw JSONError.WrongType }
//        var collectVarieties = [Pokemon]()
//        for tmpDecoder in tmpVarieties {
//            collectVarieties.append(try Pokemon(tmpDecoder))
//        }
//        varieties = collectVarieties
        
    }
}

public class Generation : JSONJoy {
    public let id: Int   // The identifier for this generation resource
    public let name: String   // The name for this generation resource
//    public let abilities: [Ability]   // A list of abilities that were introduced in this generation
//    public let names: [Name]   // The name of this generation listed in different languages
//    public let main_region: Region   // The main region travelled in this generation
    public let moves: [Move]   // A list of moves that were introduced in this generation
    public let pokemon_species: [PokemonSpecies]   // A list of Pokémon species that were introduced in this generation
//    public let types: [Type]   // A list of types that were introduced in this generation
    public let version_groups: [VersionGroup]   // A list of version groups that were introduced in this generation
    
    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
//        guard let tmpAbilities = decoder["abilities"].array else { throw JSONError.WrongType }
//        var collectAbilities = [Ability]()
//        for tmpDecoder in tmpAbilities {
//            collectAbilities.append(try Ability(tmpDecoder))
//        }
//        abilities = collectAbilities
        
        
//        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
//        var collectNames = [Name]()
//        for tmpDecoder in tmpNames {
//            collectNames.append(try Name(tmpDecoder))
//        }
//        names = collectNames
//        
//        main_region = try Region(decoder["main_region"])
        
        guard let tmpMoves = decoder["moves"].array else { throw JSONError.WrongType }
        var collectMoves = [Move]()
        for tmpDecoder in tmpMoves {
            collectMoves.append(try Move(tmpDecoder))
        }
        moves = collectMoves
        
        
        guard let tmpPokemon_species = decoder["pokemon_species"].array else { throw JSONError.WrongType }
        var collectPokemon_species = [PokemonSpecies]()
        for tmpDecoder in tmpPokemon_species {
            collectPokemon_species.append(try PokemonSpecies(tmpDecoder))
        }
        pokemon_species = collectPokemon_species
        
//        guard let tmpTypes = decoder["types"].array else { throw JSONError.WrongType }
//        var collectTypes = [Type]()
//        for tmpDecoder in tmpTypes {
//            collectTypes.append(try Type(tmpDecoder))
//        }
//        types = collectTypes
        
        
        guard let tmpVersion_groups = decoder["version_groups"].array else { throw JSONError.WrongType }
        var collectVersion_groups = [VersionGroup]()
        for tmpDecoder in tmpVersion_groups {
            collectVersion_groups.append(try VersionGroup(tmpDecoder))
        }
        version_groups = collectVersion_groups
    }
}

public class PokemonSpeciesFlavorText : JSONJoy {
    public let flavor_text: String   // The localized flavor text for an API resource in a specific language
    public let language: NamedAPIResource   // The language this name is in
    public let version: NamedAPIResource   // The version this flavor text entry is used in
    
    public required init(_ decoder: JSONDecoder) throws {
        flavor_text = try decoder["flavor_text"].getString()
        language = try NamedAPIResource(decoder["language"])
        version = try NamedAPIResource(decoder["version"])
    }
}

public class VerboseEffect : JSONJoy {
    public let effect: String   // The localized effect text for an API resource in a specific language
    public let short_effect: String   // The localized effect text in brief
    public let language: NamedAPIResource   // The language this effect is in
    
    public required init(_ decoder: JSONDecoder) throws {
        effect = try decoder["effect"].getString()
        short_effect = try decoder["short_effect"].getString()
        language = try NamedAPIResource(decoder["language"])
    }
}
