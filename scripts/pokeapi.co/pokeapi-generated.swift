//
// This file was generated by a Python script.
// DO NOT USE THIS CODE DIRECTLY! IT DOES NOT COMPILE!
//

//
// There are documentation errors in the API, so some types are wrong.
// Double check everything before using any of this generated code.
// DO NOT USE THIS CODE DIRECTLY! IT DOES NOT COMPILE!
//


//
// Resource Lists - APIResourceList
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class APIResourceList : JSONJoy {
    public let count: Int   // The total number of resources abailable from this API
    public let next: String   // The url for the next 'page' in the list
    public let previous: Bool   // The url for the previous page in the list
    public let results: [APIResource]   // I list of unnamed API resources

    public required init(_ decoder: JSONDecoder) throws {
        count = try decoder["count"].getInt()
        next = try decoder["next"].getString()
        previous = try decoder["previous"].bool
        
        guard let tmpResults = decoder["results"].array else { throw JSONError.WrongType }
        var collectResults = [APIResource]()
        for tmpDecoder in tmpResults {
            collectResults.append(try APIResource(tmpDecoder))
        }
        results = collectResults

    }
}

//
// Resource Lists - NamedAPIResourceList
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class NamedAPIResourceList : JSONJoy {
    public let count: Int   // The total number of resources abailable from this API
    public let next: String   // The url for the next 'page' in the list
    public let previous: Bool   // The url for the previous page in the list
    public let results: [NamedAPIResource]   // I list of named API resources

    public required init(_ decoder: JSONDecoder) throws {
        count = try decoder["count"].getInt()
        next = try decoder["next"].getString()
        previous = try decoder["previous"].bool
        
        guard let tmpResults = decoder["results"].array else { throw JSONError.WrongType }
        var collectResults = [NamedAPIResource]()
        for tmpDecoder in tmpResults {
            collectResults.append(try NamedAPIResource(tmpDecoder))
        }
        results = collectResults

    }
}

//
// Resource Lists - Berry
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Berry : JSONJoy {
    public let id: Int   // The identifier for this berry resource
    public let name: String   // The name for this berry resource
    public let growth_time: Int   // Time it takes the tree to grow one stage, in hours. Berry trees go through four of these growth stages before they can be picked.
    public let max_harvest: Int   // The maximum number of these berries that can grow on one tree in Generation IV
    public let natural_gift_power: Int   // The power of the move "Natural Gift" when used with this Berry
    public let size: Int   // The size of this Berry, in millimeters
    public let smoothness: Int   // The smoothness of this Berry, used in making Pokéblocks or Poffins
    public let soil_dryness: Int   // The speed at which this Berry dries out the soil as it grows. A higher rate means the soil dries more quickly.
    public let firmness: BerryFirmness   // The firmness of this berry, used in making Pokéblocks or Poffins
    public let flavors: [BerryFlavorMap]   // A list of references to each flavor a berry can have and the potency of each of those flavors in regard to this berry
    public let item: Item   // Berries are actually items. This is a reference to the item specific data for this berry.
    public let natural_gift_type: Type   // The Type the move "Natural Gift" has when used with this Berry

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        growth_time = try decoder["growth_time"].getInt()
        max_harvest = try decoder["max_harvest"].getInt()
        natural_gift_power = try decoder["natural_gift_power"].getInt()
        size = try decoder["size"].getInt()
        smoothness = try decoder["smoothness"].getInt()
        soil_dryness = try decoder["soil_dryness"].getInt()
        firmness = try BerryFirmness(decoder["firmness"])
        
        guard let tmpFlavors = decoder["flavors"].array else { throw JSONError.WrongType }
        var collectFlavors = [BerryFlavorMap]()
        for tmpDecoder in tmpFlavors {
            collectFlavors.append(try BerryFlavorMap(tmpDecoder))
        }
        flavors = collectFlavors

        item = try Item(decoder["item"])
        natural_gift_type = try Type(decoder["natural_gift_type"])
    }
}

//
// Resource Lists - BerryFlavorMap
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class BerryFlavorMap : JSONJoy {
    public let potency: Int   // How powerful the referenced flavor is for this berry
    public let flavor: BerryFlavor   // The referenced berry flavor

    public required init(_ decoder: JSONDecoder) throws {
        potency = try decoder["potency"].getInt()
        flavor = try BerryFlavor(decoder["flavor"])
    }
}

//
// Resource Lists - BerryFirmness
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class BerryFirmness : JSONJoy {
    public let id: Int   // The identifier for this berry firmness resource
    public let name: String   // The name for this berry firmness resource
    public let berries: [Berry]   // A list of the berries with this firmness
    public let names: [Name]   // The name of this berry firmness listed in different languages

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpBerries = decoder["berries"].array else { throw JSONError.WrongType }
        var collectBerries = [Berry]()
        for tmpDecoder in tmpBerries {
            collectBerries.append(try Berry(tmpDecoder))
        }
        berries = collectBerries

        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

    }
}

//
// Resource Lists - BerryFlavor
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class BerryFlavor : JSONJoy {
    public let id: Int   // The identifier for this berry flavor resource
    public let name: String   // The name for this berry flavor resource
    public let berries: [FlavorBerryMap]   // A list of the berries with this flavor
    public let contest_type: ContestType   // The contest type that correlates with this berry flavor
    public let names: [Name]   // The name of this berry flavor listed in different languages

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpBerries = decoder["berries"].array else { throw JSONError.WrongType }
        var collectBerries = [FlavorBerryMap]()
        for tmpDecoder in tmpBerries {
            collectBerries.append(try FlavorBerryMap(tmpDecoder))
        }
        berries = collectBerries

        contest_type = try ContestType(decoder["contest_type"])
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

    }
}

//
// Resource Lists - FlavorBerryMap
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class FlavorBerryMap : JSONJoy {
    public let potency: Int   // How powerful the referenced flavor is for this berry
    public let berry: Berry   // The berry with the referenced flavor

    public required init(_ decoder: JSONDecoder) throws {
        potency = try decoder["potency"].getInt()
        berry = try Berry(decoder["berry"])
    }
}

//
// Resource Lists - ContestType
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class ContestType : JSONJoy {
    public let id: Int   // The identifier for this contest type resource
    public let name: String   // The name for this contest type resource
    public let berry_flavor: BerryFlavor   // The berry flavor that correlates with this contest type
    public let names: [Name]   // The name of this contest type listed in different languages

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        berry_flavor = try BerryFlavor(decoder["berry_flavor"])
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

    }
}

//
// Resource Lists - ContestEffect
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class ContestEffect : JSONJoy {
    public let id: Int   // The identifier for this contest type resource
    public let appeal: String   // The base number of hearts the user of this move gets
    public let jam: Int   // The base number of hearts the user's opponent loses
    public let effect_entries: [Effect]   // The result of this contest effect listed in different languages
    public let flavor_text_entries: [FlavorText]   // The flavor text of this contest effect listed in different languages

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        appeal = try decoder["appeal"].getString()
        jam = try decoder["jam"].getInt()
        
        guard let tmpEffect_entries = decoder["effect_entries"].array else { throw JSONError.WrongType }
        var collectEffect_entries = [Effect]()
        for tmpDecoder in tmpEffect_entries {
            collectEffect_entries.append(try Effect(tmpDecoder))
        }
        effect_entries = collectEffect_entries

        
        guard let tmpFlavor_text_entries = decoder["flavor_text_entries"].array else { throw JSONError.WrongType }
        var collectFlavor_text_entries = [FlavorText]()
        for tmpDecoder in tmpFlavor_text_entries {
            collectFlavor_text_entries.append(try FlavorText(tmpDecoder))
        }
        flavor_text_entries = collectFlavor_text_entries

    }
}

//
// Resource Lists - SuperContestEffect
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class SuperContestEffect : JSONJoy {
    public let id: Int   // The identifier for this super contest effect resource
    public let appeal: String   // The level of appeal this super contest effect has
    public let flavor_text_entries: [FlavorText]   // The flavor text of this super contest effect listed in different languages
    public let moves: [Move]   // A list of moves that have the effect when used in super contests

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        appeal = try decoder["appeal"].getString()
        
        guard let tmpFlavor_text_entries = decoder["flavor_text_entries"].array else { throw JSONError.WrongType }
        var collectFlavor_text_entries = [FlavorText]()
        for tmpDecoder in tmpFlavor_text_entries {
            collectFlavor_text_entries.append(try FlavorText(tmpDecoder))
        }
        flavor_text_entries = collectFlavor_text_entries

        
        guard let tmpMoves = decoder["moves"].array else { throw JSONError.WrongType }
        var collectMoves = [Move]()
        for tmpDecoder in tmpMoves {
            collectMoves.append(try Move(tmpDecoder))
        }
        moves = collectMoves

    }
}

//
// Resource Lists - EncounterMethod
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class EncounterMethod : JSONJoy {
    public let id: Int   // The identifier for this encounter method resource
    public let name: String   // The name for this encounter method resource
    public let order: Int   // A good value for sorting
    public let names: [Name]   // The name of this encounter method listed in different languages

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        order = try decoder["order"].getInt()
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

    }
}

//
// Resource Lists - EncounterCondition
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class EncounterCondition : JSONJoy {
    public let id: Int   // The identifier for this encounter condition resource
    public let name: String   // The name for this encounter condition resource
    public let names: [Name]   // The name of this encounter method listed in different languages
    public let values: [EncounterConditionValue]   // A list of possible values for this encounter condition

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        
        guard let tmpValues = decoder["values"].array else { throw JSONError.WrongType }
        var collectValues = [EncounterConditionValue]()
        for tmpDecoder in tmpValues {
            collectValues.append(try EncounterConditionValue(tmpDecoder))
        }
        values = collectValues

    }
}

//
// Resource Lists - EncounterConditionValue
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class EncounterConditionValue : JSONJoy {
    public let id: Int   // The identifier for this encounter condition value resource
    public let name: String   // The name for this encounter condition value resource
    public let condition: [EncounterCondition]   // The condition this encounter condition value pertains to
    public let names: [Name]   // The name of this encounter condition value listed in different languages

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpCondition = decoder["condition"].array else { throw JSONError.WrongType }
        var collectCondition = [EncounterCondition]()
        for tmpDecoder in tmpCondition {
            collectCondition.append(try EncounterCondition(tmpDecoder))
        }
        condition = collectCondition

        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

    }
}

//
// Resource Lists - EvolutionChain
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class EvolutionChain : JSONJoy {
    public let id: Int   // The identifier for this evolution chain resource
    public let baby_trigger_item: Item   // The item that a Pokémon would be holding when mating that would trigger the egg hatching a baby Pokémon rather than a basic Pokémon
    public let chain: ChainLink   // The base chain link object. Each link contains evolution details for a Pokémon in the chain. Each link references the next Pokémon in the natural evolution order.

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        baby_trigger_item = try Item(decoder["baby_trigger_item"])
        chain = try decoder["chain"].ChainLink
    }
}

//
// Resource Lists - ChainLink
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class ChainLink : JSONJoy {
    public let is_baby: Bool   // Whether or not this link is for a baby Pokémon. This would only ever be true on the base link.
    public let species: PokemonSpecies   // The Pokémon species at this point in the evolution chain
    public let evolution_details: EvolutionDetail   // All details regarding the specific details of the referenced Pokémon species evolution
    public let evolves_to: [ChainLink]   // A List of chain objects.

    public required init(_ decoder: JSONDecoder) throws {
        is_baby = try decoder["is_baby"].bool
        species = try PokemonSpecies(decoder["species"])
        evolution_details = try decoder["evolution_details"].EvolutionDetail
        
        guard let tmpEvolves_to = decoder["evolves_to"].array else { throw JSONError.WrongType }
        var collectEvolves_to = [ChainLink]()
        for tmpDecoder in tmpEvolves_to {
            collectEvolves_to.append(try ChainLink(tmpDecoder))
        }
        evolves_to = collectEvolves_to

    }
}

//
// Resource Lists - EvolutionDetail
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class EvolutionDetail : JSONJoy {
    public let item: Item   // The item required to cause evolution this into Pokémon species
    public let trigger: EvolutionTrigger   // The type of event that triggers evolution into this Pokémon species
    public let gender: Gender   // The gender the evolving Pokémon species must be in order to evolve into this Pokémon species
    public let held_item: Item   // The item the evolving Pokémon species must be holding during the evolution trigger event to evolve into this Pokémon species
    public let known_move: Move   // The move that must be known by the evolving Pokémon species during the evolution trigger event in order to evolve into this Pokémon species
    public let known_move_type: Type   // The evolving Pokémon species must know a move with this type during the evolution trigger event in order to evolve into this Pokémon species
    public let location: Location   // The location the evolution must be triggered at.
    public let min_level: Int   // The minimum required level of the evolving Pokémon species to evolve into this Pokémon species
    public let min_happiness: Int   // The minimum required level of happiness the evolving Pokémon species to evolve into this Pokémon species
    public let min_beauty: Int   // The minimum required level of beauty the evolving Pokémon species to evolve into this Pokémon species
    public let min_affection: Int   // The minimum required level of affection the evolving Pokémon species to evolve into this Pokémon species
    public let needs_overworld_rain: Bool   // Whether or not it must be raining in the overworld to cause evolution this Pokémon species
    public let party_species: PokemonSpecies   // The pokemon species that must be in the players party in order for the evolving Pokémon species to evolve into this Pokémon species
    public let party_type: Type   // The player must have a pokemon of this type in their party during the evolution trigger event in order for the evolving Pokémon species to evolve into this Pokémon species
    public let relative_physical_stats: Int   // The required relation between the Pokémon's Attack and Defense stats. 1 means Attack > Defense. 0 means Attack = Defense. -1 means Attack < Defense.
    public let time_of_day: String   // The required time of day. Day or night.
    public let trade_species: Pokemon Species   // Pokémon species for which this one must be traded.
    public let turn_upside_down: Bool   // Whether or not the 3DS needs to be turned upside-down as this Pokémon levels up.

    public required init(_ decoder: JSONDecoder) throws {
        item = try Item(decoder["item"])
        trigger = try EvolutionTrigger(decoder["trigger"])
        gender = try Gender(decoder["gender"])
        held_item = try Item(decoder["held_item"])
        known_move = try Move(decoder["known_move"])
        known_move_type = try Type(decoder["known_move_type"])
        location = try Location(decoder["location"])
        min_level = try decoder["min_level"].getInt()
        min_happiness = try decoder["min_happiness"].getInt()
        min_beauty = try decoder["min_beauty"].getInt()
        min_affection = try decoder["min_affection"].getInt()
        needs_overworld_rain = try decoder["needs_overworld_rain"].bool
        party_species = try PokemonSpecies(decoder["party_species"])
        party_type = try Type(decoder["party_type"])
        relative_physical_stats = try decoder["relative_physical_stats"].getInt()
        time_of_day = try decoder["time_of_day"].getString()
        trade_species = try Pokemon Species(decoder["trade_species"])
        turn_upside_down = try decoder["turn_upside_down"].bool
    }
}

//
// Resource Lists - EvolutionTrigger
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class EvolutionTrigger : JSONJoy {
    public let id: Int   // The identifier for this evolution trigger resource
    public let name: String   // The name for this evolution trigger resource
    public let names: [Name]   // The name of this evolution trigger listed in different languages
    public let pokemon_species: [PokemonSpecies]   // A list of pokemon species that result from this evolution trigger

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        
        guard let tmpPokemon_species = decoder["pokemon_species"].array else { throw JSONError.WrongType }
        var collectPokemon_species = [PokemonSpecies]()
        for tmpDecoder in tmpPokemon_species {
            collectPokemon_species.append(try PokemonSpecies(tmpDecoder))
        }
        pokemon_species = collectPokemon_species

    }
}

//
// Resource Lists - Generation
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Generation : JSONJoy {
    public let id: Int   // The identifier for this generation resource
    public let name: String   // The name for this generation resource
    public let abilities: [Ability]   // A list of abilities that were introduced in this generation
    public let names: [Name]   // The name of this generation listed in different languages
    public let main_region: Region   // The main region travelled in this generation
    public let moves: [Move]   // A list of moves that were introduced in this generation
    public let pokemon_species: [PokemonSpecies]   // A list of Pokémon species that were introduced in this generation
    public let types: [Type]   // A list of types that were introduced in this generation
    public let version_groups: [VersionGroup]   // A list of version groups that were introduced in this generation

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpAbilities = decoder["abilities"].array else { throw JSONError.WrongType }
        var collectAbilities = [Ability]()
        for tmpDecoder in tmpAbilities {
            collectAbilities.append(try Ability(tmpDecoder))
        }
        abilities = collectAbilities

        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        main_region = try Region(decoder["main_region"])
        
        guard let tmpMoves = decoder["moves"].array else { throw JSONError.WrongType }
        var collectMoves = [Move]()
        for tmpDecoder in tmpMoves {
            collectMoves.append(try Move(tmpDecoder))
        }
        moves = collectMoves

        
        guard let tmpPokemon_species = decoder["pokemon_species"].array else { throw JSONError.WrongType }
        var collectPokemon_species = [PokemonSpecies]()
        for tmpDecoder in tmpPokemon_species {
            collectPokemon_species.append(try PokemonSpecies(tmpDecoder))
        }
        pokemon_species = collectPokemon_species

        
        guard let tmpTypes = decoder["types"].array else { throw JSONError.WrongType }
        var collectTypes = [Type]()
        for tmpDecoder in tmpTypes {
            collectTypes.append(try Type(tmpDecoder))
        }
        types = collectTypes

        
        guard let tmpVersion_groups = decoder["version_groups"].array else { throw JSONError.WrongType }
        var collectVersion_groups = [VersionGroup]()
        for tmpDecoder in tmpVersion_groups {
            collectVersion_groups.append(try VersionGroup(tmpDecoder))
        }
        version_groups = collectVersion_groups

    }
}

//
// Resource Lists - Pokedex
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Pokedex : JSONJoy {
    public let id: Int   // The identifier for this Pokédex resource
    public let name: String   // The name for this Pokédex resource
    public let is_main_series: Bool   // Whether or not this Pokédex originated in the main series of the video games
    public let descriptions: [Description]   // The description of this Pokédex listed in different languages
    public let names: [Name]   // The name of this Pokédex listed in different languages
    public let pokemon_entries: [PokemonEntry]   // A list of pokemon catalogued in this Pokédex and their indexes
    public let region: Region   // The region this Pokédex catalogues pokemon for
    public let version_groups: VersionGroup   // A list of version groups this Pokédex is relevent to

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        is_main_series = try decoder["is_main_series"].bool
        
        guard let tmpDescriptions = decoder["descriptions"].array else { throw JSONError.WrongType }
        var collectDescriptions = [Description]()
        for tmpDecoder in tmpDescriptions {
            collectDescriptions.append(try Description(tmpDecoder))
        }
        descriptions = collectDescriptions

        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        
        guard let tmpPokemon_entries = decoder["pokemon_entries"].array else { throw JSONError.WrongType }
        var collectPokemon_entries = [PokemonEntry]()
        for tmpDecoder in tmpPokemon_entries {
            collectPokemon_entries.append(try PokemonEntry(tmpDecoder))
        }
        pokemon_entries = collectPokemon_entries

        region = try Region(decoder["region"])
        version_groups = try VersionGroup(decoder["version_groups"])
    }
}

//
// Resource Lists - PokemonEntry
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PokemonEntry : JSONJoy {
    public let entry_number: Int   // The index of this pokemon species entry within the Pokédex
    public let pokemon_species: PokemonSpecies   // The Pokémon species being encountered

    public required init(_ decoder: JSONDecoder) throws {
        entry_number = try decoder["entry_number"].getInt()
        pokemon_species = try PokemonSpecies(decoder["pokemon_species"])
    }
}

//
// Resource Lists - Version
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Version : JSONJoy {
    public let id: Int   // The identifier for this version resource
    public let name: String   // The name for this version resource
    public let names: [Name]   // The name of this version listed in different languages
    public let version_group: VersionGroup   // The version group this version belongs to

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        version_group = try VersionGroup(decoder["version_group"])
    }
}

//
// Resource Lists - VersionGroup
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class VersionGroup : JSONJoy {
    public let id: Int   // The identifier for this version group resource
    public let name: String   // The name for this version group resource
    public let order: Int   // Order for sorting. Almost by date of release, except similar versions are grouped together.
    public let generation: [Generation]   // The generation this version was introduced in
    public let move_learn_methods: [MoveLearnMethod]   // A list of methods in which Pokémon can learn moves in this version group
    public let names: [Name]   // The name of this version group listed in different languages
    public let pokedexes: [Pokedex]   // A list of Pokédexes introduces in this version group
    public let regions: [Region]   // A list of regions that can be visited in this version group
    public let versions: [Version]   // The versions this version group owns

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        order = try decoder["order"].getInt()
        
        guard let tmpGeneration = decoder["generation"].array else { throw JSONError.WrongType }
        var collectGeneration = [Generation]()
        for tmpDecoder in tmpGeneration {
            collectGeneration.append(try Generation(tmpDecoder))
        }
        generation = collectGeneration

        
        guard let tmpMove_learn_methods = decoder["move_learn_methods"].array else { throw JSONError.WrongType }
        var collectMove_learn_methods = [MoveLearnMethod]()
        for tmpDecoder in tmpMove_learn_methods {
            collectMove_learn_methods.append(try MoveLearnMethod(tmpDecoder))
        }
        move_learn_methods = collectMove_learn_methods

        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        
        guard let tmpPokedexes = decoder["pokedexes"].array else { throw JSONError.WrongType }
        var collectPokedexes = [Pokedex]()
        for tmpDecoder in tmpPokedexes {
            collectPokedexes.append(try Pokedex(tmpDecoder))
        }
        pokedexes = collectPokedexes

        
        guard let tmpRegions = decoder["regions"].array else { throw JSONError.WrongType }
        var collectRegions = [Region]()
        for tmpDecoder in tmpRegions {
            collectRegions.append(try Region(tmpDecoder))
        }
        regions = collectRegions

        
        guard let tmpVersions = decoder["versions"].array else { throw JSONError.WrongType }
        var collectVersions = [Version]()
        for tmpDecoder in tmpVersions {
            collectVersions.append(try Version(tmpDecoder))
        }
        versions = collectVersions

    }
}

//
// Resource Lists - Item
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Item : JSONJoy {
    public let id: Int   // The identifier for this item resource
    public let name: String   // The name for this item resource
    public let cost: Int   // The price of this item in stores
    public let fling_power: Int   // The power of the move Fling when used with this item.
    public let fling_effect: ItemFlingEffect   // The effect of the move Fling when used with this item
    public let attributes: [ItemAttribute]   // A list of attributes this item has
    public let category: ItemCategory   // The category of items this item falls into
    public let effect_entries: [VerboseEffect]   // The effect of this ability listed in different languages
    public let flavor_text_entries: [VersionGroupFlavorText]   // The flavor text of this ability listed in different languages
    public let game_indices: [GenerationGameIndex]   // A list of game indices relevent to this item by generation
    public let names: [Name]   // The name of this item listed in different languages
    public let sprites: ItemSprites   // A set of sprites used to depict this item in the game
    public let held_by_pokemon: [Pokemon]   // A list of Pokémon that might be found in the wild holding this item
    public let baby_trigger_for: [EvolutionChain]   // An evolution chain this item requires to produce a bay during mating

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        cost = try decoder["cost"].getInt()
        fling_power = try decoder["fling_power"].getInt()
        fling_effect = try decoder["fling_effect"].ItemFlingEffect
        
        guard let tmpAttributes = decoder["attributes"].array else { throw JSONError.WrongType }
        var collectAttributes = [ItemAttribute]()
        for tmpDecoder in tmpAttributes {
            collectAttributes.append(try ItemAttribute(tmpDecoder))
        }
        attributes = collectAttributes

        category = try decoder["category"].ItemCategory
        
        guard let tmpEffect_entries = decoder["effect_entries"].array else { throw JSONError.WrongType }
        var collectEffect_entries = [VerboseEffect]()
        for tmpDecoder in tmpEffect_entries {
            collectEffect_entries.append(try VerboseEffect(tmpDecoder))
        }
        effect_entries = collectEffect_entries

        
        guard let tmpFlavor_text_entries = decoder["flavor_text_entries"].array else { throw JSONError.WrongType }
        var collectFlavor_text_entries = [VersionGroupFlavorText]()
        for tmpDecoder in tmpFlavor_text_entries {
            collectFlavor_text_entries.append(try VersionGroupFlavorText(tmpDecoder))
        }
        flavor_text_entries = collectFlavor_text_entries

        
        guard let tmpGame_indices = decoder["game_indices"].array else { throw JSONError.WrongType }
        var collectGame_indices = [GenerationGameIndex]()
        for tmpDecoder in tmpGame_indices {
            collectGame_indices.append(try GenerationGameIndex(tmpDecoder))
        }
        game_indices = collectGame_indices

        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        sprites = try decoder["sprites"].ItemSprites
        
        guard let tmpHeld_by_pokemon = decoder["held_by_pokemon"].array else { throw JSONError.WrongType }
        var collectHeld_by_pokemon = [Pokemon]()
        for tmpDecoder in tmpHeld_by_pokemon {
            collectHeld_by_pokemon.append(try Pokemon(tmpDecoder))
        }
        held_by_pokemon = collectHeld_by_pokemon

        
        guard let tmpBaby_trigger_for = decoder["baby_trigger_for"].array else { throw JSONError.WrongType }
        var collectBaby_trigger_for = [EvolutionChain]()
        for tmpDecoder in tmpBaby_trigger_for {
            collectBaby_trigger_for.append(try EvolutionChain(tmpDecoder))
        }
        baby_trigger_for = collectBaby_trigger_for

    }
}

//
// Resource Lists - ItemSprites
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class ItemSprites : JSONJoy {
    public let default: String   // The default depiction of this item

    public required init(_ decoder: JSONDecoder) throws {
        default = try decoder["default"].getString()
    }
}

//
// Resource Lists - ItemAttribute
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class ItemAttribute : JSONJoy {
    public let id: Int   // The identifier for this item attribute resource
    public let name: String   // The name for this item attribute resource
    public let items: [Item]   // A list of items that have this attribute
    public let names: [Name]   // The name of this item attribute listed in different languages
    public let descriptions: [Description]   // The description of this item attribute listed in different languages

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpItems = decoder["items"].array else { throw JSONError.WrongType }
        var collectItems = [Item]()
        for tmpDecoder in tmpItems {
            collectItems.append(try Item(tmpDecoder))
        }
        items = collectItems

        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        
        guard let tmpDescriptions = decoder["descriptions"].array else { throw JSONError.WrongType }
        var collectDescriptions = [Description]()
        for tmpDecoder in tmpDescriptions {
            collectDescriptions.append(try Description(tmpDecoder))
        }
        descriptions = collectDescriptions

    }
}

//
// Resource Lists - ItemCategory
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class ItemCategory : JSONJoy {
    public let id: Int   // The identifier for this item category resource
    public let name: String   // The name for this item category resource
    public let items: [Item]   // A list of items that are a part of this category
    public let names: [Name]   // The name of this item category listed in different languages
    public let pocket: ItemPocket   // The pocket items in this category would be put in

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpItems = decoder["items"].array else { throw JSONError.WrongType }
        var collectItems = [Item]()
        for tmpDecoder in tmpItems {
            collectItems.append(try Item(tmpDecoder))
        }
        items = collectItems

        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        pocket = try ItemPocket(decoder["pocket"])
    }
}

//
// Resource Lists - ItemFlingEffect
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class ItemFlingEffect : JSONJoy {
    public let id: Int   // The identifier for this fling effect resource
    public let name: String   // The name for this fling effect resource
    public let effect_entries: [Effect]   // The result of this fling effect listed in different languages
    public let items: [Item]   // A list of items that have this fling effect

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpEffect_entries = decoder["effect_entries"].array else { throw JSONError.WrongType }
        var collectEffect_entries = [Effect]()
        for tmpDecoder in tmpEffect_entries {
            collectEffect_entries.append(try Effect(tmpDecoder))
        }
        effect_entries = collectEffect_entries

        
        guard let tmpItems = decoder["items"].array else { throw JSONError.WrongType }
        var collectItems = [Item]()
        for tmpDecoder in tmpItems {
            collectItems.append(try Item(tmpDecoder))
        }
        items = collectItems

    }
}

//
// Resource Lists - ItemPocket
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class ItemPocket : JSONJoy {
    public let id: Int   // The identifier for this item pocket resource
    public let name: String   // The name for this item pocket resource
    public let categories: [ItemCategory]   // A list of item categories that are relevent to this item pocket
    public let names: [Name]   // The name of this item pocket listed in different languages

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpCategories = decoder["categories"].array else { throw JSONError.WrongType }
        var collectCategories = [ItemCategory]()
        for tmpDecoder in tmpCategories {
            collectCategories.append(try ItemCategory(tmpDecoder))
        }
        categories = collectCategories

        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

    }
}

//
// Resource Lists - Move
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Move : JSONJoy {
    public let id: Int   // The identifier for this move resource
    public let name: String   // The name for this move resource
    public let accuracy: Int   // The percent value of how likely this move is to be successful
    public let effect_chance: Int   // The percent value of how likely it is this moves effect will happen
    public let pp: Int   // Power points. The number of times this move can be used
    public let priority: Int   // A value between -8 and 8. Sets the order in which moves are executed during battle. See Bulbapedia for greater detail.
    public let power: Int   // The base power of this move with a value of 0 if it does not have a base power
    public let contest_combos: [ContestComboSets]   // A detail of normal and super contest combos that require this move
    public let contest_type: ContestType   // The type of appeal this move gives a Pokémon when used in a contest
    public let contest_effect: ContestEffect   // The effect the move has when used in a contest
    public let damage_class: MoveDamageClass   // The type of damage the move inflicts on the target, e.g. physical
    public let effect_entries: [VerboseEffect]   // The effect of this move listed in different languages
    public let effect_changes: [AbilityEffectChange]   // The list of previous effects this move has had across version groups of the games
    public let generation: Generation   // The generation in which this move was introduced
    public let meta: MoveMetaData   // Metadata about this move
    public let names: [Name]   // The name of this move listed in different languages
    public let past_values: [PastMoveStatValues]   // A list of move resource value changes across ersion groups of the game
    public let stat_changes: [MoveStatChange]   // A list of stats this moves effects and how much it effects them
    public let contest_effect: ContestEffect   // The effect the move has when used in a super contest
    public let target: MoveTarget   // The type of target that will recieve the effects of the attack
    public let type: Type   // The elemental type of this move

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        accuracy = try decoder["accuracy"].getInt()
        effect_chance = try decoder["effect_chance"].getInt()
        pp = try decoder["pp"].getInt()
        priority = try decoder["priority"].getInt()
        power = try decoder["power"].getInt()
        
        guard let tmpContest_combos = decoder["contest_combos"].array else { throw JSONError.WrongType }
        var collectContest_combos = [ContestComboSets]()
        for tmpDecoder in tmpContest_combos {
            collectContest_combos.append(try ContestComboSets(tmpDecoder))
        }
        contest_combos = collectContest_combos

        contest_type = try ContestType(decoder["contest_type"])
        contest_effect = try ContestEffect(decoder["contest_effect"])
        damage_class = try MoveDamageClass(decoder["damage_class"])
        
        guard let tmpEffect_entries = decoder["effect_entries"].array else { throw JSONError.WrongType }
        var collectEffect_entries = [VerboseEffect]()
        for tmpDecoder in tmpEffect_entries {
            collectEffect_entries.append(try VerboseEffect(tmpDecoder))
        }
        effect_entries = collectEffect_entries

        
        guard let tmpEffect_changes = decoder["effect_changes"].array else { throw JSONError.WrongType }
        var collectEffect_changes = [AbilityEffectChange]()
        for tmpDecoder in tmpEffect_changes {
            collectEffect_changes.append(try AbilityEffectChange(tmpDecoder))
        }
        effect_changes = collectEffect_changes

        generation = try Generation(decoder["generation"])
        meta = try decoder["meta"].MoveMetaData
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        
        guard let tmpPast_values = decoder["past_values"].array else { throw JSONError.WrongType }
        var collectPast_values = [PastMoveStatValues]()
        for tmpDecoder in tmpPast_values {
            collectPast_values.append(try PastMoveStatValues(tmpDecoder))
        }
        past_values = collectPast_values

        
        guard let tmpStat_changes = decoder["stat_changes"].array else { throw JSONError.WrongType }
        var collectStat_changes = [MoveStatChange]()
        for tmpDecoder in tmpStat_changes {
            collectStat_changes.append(try MoveStatChange(tmpDecoder))
        }
        stat_changes = collectStat_changes

        contest_effect = try ContestEffect(decoder["contest_effect"])
        target = try MoveTarget(decoder["target"])
        type = try Type(decoder["type"])
    }
}

//
// Resource Lists - ContestComboSets
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class ContestComboSets : JSONJoy {
    public let normal: [ContestComboDetail]   // A detail of moves this move can be used before or after, granting additional appeal points in contests
    public let super: [ContestComboDetail]   // A detail of moves this move can be used before or after, granting additional appeal points in super contests

    public required init(_ decoder: JSONDecoder) throws {
        
        guard let tmpNormal = decoder["normal"].array else { throw JSONError.WrongType }
        var collectNormal = [ContestComboDetail]()
        for tmpDecoder in tmpNormal {
            collectNormal.append(try ContestComboDetail(tmpDecoder))
        }
        normal = collectNormal

        
        guard let tmpSuper = decoder["super"].array else { throw JSONError.WrongType }
        var collectSuper = [ContestComboDetail]()
        for tmpDecoder in tmpSuper {
            collectSuper.append(try ContestComboDetail(tmpDecoder))
        }
        super = collectSuper

    }
}

//
// Resource Lists - ContestComboDetail
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class ContestComboDetail : JSONJoy {
    public let use_before: [Move]   // A list of moves to use before this move
    public let use_after: [Move]   // A list of moves to use after this move

    public required init(_ decoder: JSONDecoder) throws {
        
        guard let tmpUse_before = decoder["use_before"].array else { throw JSONError.WrongType }
        var collectUse_before = [Move]()
        for tmpDecoder in tmpUse_before {
            collectUse_before.append(try Move(tmpDecoder))
        }
        use_before = collectUse_before

        
        guard let tmpUse_after = decoder["use_after"].array else { throw JSONError.WrongType }
        var collectUse_after = [Move]()
        for tmpDecoder in tmpUse_after {
            collectUse_after.append(try Move(tmpDecoder))
        }
        use_after = collectUse_after

    }
}

//
// Resource Lists - MoveMetaData
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class MoveMetaData : JSONJoy {
    public let ailment: MoveAilment   // The status ailment this move inflicts on its target
    public let category: Move   // The category of move this move falls under, e.g. damage or ailment
    public let min_hits: Int   // The minimum number of times this move hits. Null if it always only hits once.
    public let max_hits: Int   // The maximum number of times this move hits. Null if it always only hits once.
    public let min_turns: Int   // The minimum number of turns this move continues to take effect. Null if it always only lasts one turn.
    public let max_turns: Int   // The maximum number of turns this move continues to take effect. Null if it always only lasts one turn.
    public let drain: Int   // HP drain (if positive) or Recoil damage (if negative), in percent of damage done
    public let healing: Int   // The amount of hp gained by the attacking pokemon, in percent of it's maximum HP
    public let crit_rate: Int   // Critical hit rate bonus
    public let ailment_chance: Int   // The likelyhood this attack will cause an ailment
    public let flinch_chance: Int   // The likelyhood this attack will cause the target pokemon to flinch
    public let stat_chance: Int   // The likelyhood this attack will cause a stat change in the target pokemon

    public required init(_ decoder: JSONDecoder) throws {
        ailment = try MoveAilment(decoder["ailment"])
        category = try Move(decoder["category"])
        min_hits = try decoder["min_hits"].getInt()
        max_hits = try decoder["max_hits"].getInt()
        min_turns = try decoder["min_turns"].getInt()
        max_turns = try decoder["max_turns"].getInt()
        drain = try decoder["drain"].getInt()
        healing = try decoder["healing"].getInt()
        crit_rate = try decoder["crit_rate"].getInt()
        ailment_chance = try decoder["ailment_chance"].getInt()
        flinch_chance = try decoder["flinch_chance"].getInt()
        stat_chance = try decoder["stat_chance"].getInt()
    }
}

//
// Resource Lists - MoveStatChange
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class MoveStatChange : JSONJoy {
    public let change: Int   // The amount of change
    public let stat: Stat   // The stat being affected

    public required init(_ decoder: JSONDecoder) throws {
        change = try decoder["change"].getInt()
        stat = try Stat(decoder["stat"])
    }
}

//
// Resource Lists - PastMoveStatValues
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PastMoveStatValues : JSONJoy {
    public let accuracy: Int   // The percent value of how likely this move is to be successful
    public let effect_chance: Int   // The percent value of how likely it is this moves effect will take effect
    public let power: Int   // The base power of this move with a value of 0 if it does not have a base power
    public let pp: Int   // Power points. The number of times this move can be used
    public let effect_entries: [VerboseEffect]   // The effect of this move listed in different languages
    public let type: Type   // The elemental type of this move
    public let version group: VersionGroup   // The version group in which these move stat values were in effect

    public required init(_ decoder: JSONDecoder) throws {
        accuracy = try decoder["accuracy"].getInt()
        effect_chance = try decoder["effect_chance"].getInt()
        power = try decoder["power"].getInt()
        pp = try decoder["pp"].getInt()
        
        guard let tmpEffect_entries = decoder["effect_entries"].array else { throw JSONError.WrongType }
        var collectEffect_entries = [VerboseEffect]()
        for tmpDecoder in tmpEffect_entries {
            collectEffect_entries.append(try VerboseEffect(tmpDecoder))
        }
        effect_entries = collectEffect_entries

        type = try Type(decoder["type"])
        version group = try VersionGroup(decoder["version group"])
    }
}

//
// Resource Lists - MoveAilment
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class MoveAilment : JSONJoy {
    public let id: Int   // The identifier for this move ailment resource
    public let name: String   // The name for this move ailment resource
    public let moves: [Move]   // A list of moves that cause this ailment
    public let names: [Name]   // The name of this move ailment listed in different languages

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpMoves = decoder["moves"].array else { throw JSONError.WrongType }
        var collectMoves = [Move]()
        for tmpDecoder in tmpMoves {
            collectMoves.append(try Move(tmpDecoder))
        }
        moves = collectMoves

        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

    }
}

//
// Resource Lists - MoveBattleStyle
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class MoveBattleStyle : JSONJoy {
    public let id: Int   // The identifier for this move battle style resource
    public let name: String   // The name for this move battle style resource
    public let names: [Name]   // The name of this move battle style listed in different languages

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

    }
}

//
// Resource Lists - MoveCategory
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class MoveCategory : JSONJoy {
    public let id: Int   // The identifier for this move category resource
    public let name: String   // The name for this move category resource
    public let moves: [Move]   // A list of moves that fall into this category
    public let descriptions: [Description]   // The description of this move ailment listed in different languages

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpMoves = decoder["moves"].array else { throw JSONError.WrongType }
        var collectMoves = [Move]()
        for tmpDecoder in tmpMoves {
            collectMoves.append(try Move(tmpDecoder))
        }
        moves = collectMoves

        
        guard let tmpDescriptions = decoder["descriptions"].array else { throw JSONError.WrongType }
        var collectDescriptions = [Description]()
        for tmpDecoder in tmpDescriptions {
            collectDescriptions.append(try Description(tmpDecoder))
        }
        descriptions = collectDescriptions

    }
}

//
// Resource Lists - MoveDamageClass
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class MoveDamageClass : JSONJoy {
    public let id: Int   // The identifier for this move damage class resource
    public let name: String   // The name for this move damage class resource
    public let descriptions: [Description]   // The description of this move damage class listed in different languages
    public let moves: [Move]   // A list of moves that fall into this damage class
    public let names: [Name]   // The name of this move damage class listed in different languages

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpDescriptions = decoder["descriptions"].array else { throw JSONError.WrongType }
        var collectDescriptions = [Description]()
        for tmpDecoder in tmpDescriptions {
            collectDescriptions.append(try Description(tmpDecoder))
        }
        descriptions = collectDescriptions

        
        guard let tmpMoves = decoder["moves"].array else { throw JSONError.WrongType }
        var collectMoves = [Move]()
        for tmpDecoder in tmpMoves {
            collectMoves.append(try Move(tmpDecoder))
        }
        moves = collectMoves

        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

    }
}

//
// Resource Lists - MoveLearnMethod
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class MoveLearnMethod : JSONJoy {
    public let id: Int   // The identifier for this move learn method resource
    public let name: String   // The name for this move learn method resource
    public let descriptions: [Description]   // The description of this move learn method listed in different languages
    public let names: [Name]   // The name of this move learn method listed in different languages
    public let version_groups: [VersionGroup]   // A list of version groups where moves can be learned through this method

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpDescriptions = decoder["descriptions"].array else { throw JSONError.WrongType }
        var collectDescriptions = [Description]()
        for tmpDecoder in tmpDescriptions {
            collectDescriptions.append(try Description(tmpDecoder))
        }
        descriptions = collectDescriptions

        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        
        guard let tmpVersion_groups = decoder["version_groups"].array else { throw JSONError.WrongType }
        var collectVersion_groups = [VersionGroup]()
        for tmpDecoder in tmpVersion_groups {
            collectVersion_groups.append(try VersionGroup(tmpDecoder))
        }
        version_groups = collectVersion_groups

    }
}

//
// Resource Lists - MoveTarget
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class MoveTarget : JSONJoy {
    public let id: Int   // The identifier for this move target resource
    public let name: String   // The name for this move target resource
    public let descriptions: [Description]   // The description of this move target listed in different languages
    public let moves: [Move]   // A list of moves that that are directed at this target
    public let names: [Name]   // The name of this move target listed in different languages

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpDescriptions = decoder["descriptions"].array else { throw JSONError.WrongType }
        var collectDescriptions = [Description]()
        for tmpDecoder in tmpDescriptions {
            collectDescriptions.append(try Description(tmpDecoder))
        }
        descriptions = collectDescriptions

        
        guard let tmpMoves = decoder["moves"].array else { throw JSONError.WrongType }
        var collectMoves = [Move]()
        for tmpDecoder in tmpMoves {
            collectMoves.append(try Move(tmpDecoder))
        }
        moves = collectMoves

        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

    }
}

//
// Resource Lists - Location
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Location : JSONJoy {
    public let id: Int   // The identifier for this location resource
    public let name: String   // The name for this location resource
    public let region: Region   // The region this location can be found in
    public let names: [Name]   // The name of this language listed in different languages
    public let game_indices: [GenerationGameIndex]   // A list of game indices relevent to this location by generation
    public let areas: APIResource (LocationArea)   // Areas that can be found within this location

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        region = try Region(decoder["region"])
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        
        guard let tmpGame_indices = decoder["game_indices"].array else { throw JSONError.WrongType }
        var collectGame_indices = [GenerationGameIndex]()
        for tmpDecoder in tmpGame_indices {
            collectGame_indices.append(try GenerationGameIndex(tmpDecoder))
        }
        game_indices = collectGame_indices

        areas = try decoder["areas"].APIResource (LocationArea)
    }
}

//
// Resource Lists - LocationArea
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class LocationArea : JSONJoy {
    public let id: Int   // The identifier for this location resource
    public let name: String   // The name for this location resource
    public let game_index: Int   // The internal id of an API resource within game data
    public let encounter_method_rates: [EncounterMethodRate]   // A list of methods in which Pokémon may be encountered in this area and how likely the method will occur depending on the version of the game
    public let location: Region   // The region this location can be found in
    public let names: [Name]   // The name of this location area listed in different languages
    public let pokemon_encounters: [PokemonEncounter]   // A list of Pokémon that can be encountered in this area along with version specific details about the encounter

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        game_index = try decoder["game_index"].getInt()
        
        guard let tmpEncounter_method_rates = decoder["encounter_method_rates"].array else { throw JSONError.WrongType }
        var collectEncounter_method_rates = [EncounterMethodRate]()
        for tmpDecoder in tmpEncounter_method_rates {
            collectEncounter_method_rates.append(try EncounterMethodRate(tmpDecoder))
        }
        encounter_method_rates = collectEncounter_method_rates

        location = try Region(decoder["location"])
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        
        guard let tmpPokemon_encounters = decoder["pokemon_encounters"].array else { throw JSONError.WrongType }
        var collectPokemon_encounters = [PokemonEncounter]()
        for tmpDecoder in tmpPokemon_encounters {
            collectPokemon_encounters.append(try PokemonEncounter(tmpDecoder))
        }
        pokemon_encounters = collectPokemon_encounters

    }
}

//
// Resource Lists - EncounterMethodRate
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class EncounterMethodRate : JSONJoy {
    public let encounter_method: EncounterMethod   // The method in which Pokémon may be encountered in an area.
    public let version_details: [EncounterVersionDetails]   // The chance of the encounter to occur on a version of the game.

    public required init(_ decoder: JSONDecoder) throws {
        encounter_method = try decoder["encounter_method"].EncounterMethod
        
        guard let tmpVersion_details = decoder["version_details"].array else { throw JSONError.WrongType }
        var collectVersion_details = [EncounterVersionDetails]()
        for tmpDecoder in tmpVersion_details {
            collectVersion_details.append(try EncounterVersionDetails(tmpDecoder))
        }
        version_details = collectVersion_details

    }
}

//
// Resource Lists - EncounterVersionDetails
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class EncounterVersionDetails : JSONJoy {
    public let rate: Int   // The chance of an encounter to occur.
    public let version: Version   // The version of the game in which the encounter can occur with the given chance.

    public required init(_ decoder: JSONDecoder) throws {
        rate = try decoder["rate"].getInt()
        version = try Version(decoder["version"])
    }
}

//
// Resource Lists - PokemonEncounter
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PokemonEncounter : JSONJoy {
    public let pokemon: Pokemon   // The Pokémon being encountered
    public let version_details: [VersionEncounterDetail]   // A list of versions and encounters with Pokémon that might happen in the referenced location area

    public required init(_ decoder: JSONDecoder) throws {
        pokemon = try Pokemon(decoder["pokemon"])
        
        guard let tmpVersion_details = decoder["version_details"].array else { throw JSONError.WrongType }
        var collectVersion_details = [VersionEncounterDetail]()
        for tmpDecoder in tmpVersion_details {
            collectVersion_details.append(try VersionEncounterDetail(tmpDecoder))
        }
        version_details = collectVersion_details

    }
}

//
// Resource Lists - PalParkArea
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PalParkArea : JSONJoy {
    public let id: Int   // The identifier for this pal park area resource
    public let name: String   // The name for this pal park area resource
    public let names: [Name]   // The name of this pal park area listed in different languages
    public let pokemon_encounters: [PalParkEncounterSpecies]   // A list of Pokémon encountered in thi pal park area along with details

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        
        guard let tmpPokemon_encounters = decoder["pokemon_encounters"].array else { throw JSONError.WrongType }
        var collectPokemon_encounters = [PalParkEncounterSpecies]()
        for tmpDecoder in tmpPokemon_encounters {
            collectPokemon_encounters.append(try PalParkEncounterSpecies(tmpDecoder))
        }
        pokemon_encounters = collectPokemon_encounters

    }
}

//
// Resource Lists - PalParkEncounterSpecies
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PalParkEncounterSpecies : JSONJoy {
    public let base_score: Int   // The base score given to the player when this Pokémon is caught during a pal park run
    public let rate: Int   // The base rate for encountering this Pokémon in this pal park area
    public let pokemon_species: PokemonSpecies   // The Pokémon species being encountered

    public required init(_ decoder: JSONDecoder) throws {
        base_score = try decoder["base_score"].getInt()
        rate = try decoder["rate"].getInt()
        pokemon_species = try PokemonSpecies(decoder["pokemon_species"])
    }
}

//
// Resource Lists - Region
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Region : JSONJoy {
    public let id: Int   // The identifier for this region resource
    public let name: String   // The name for this region resource
    public let locations: Location   // A list of locations that can be found in this region
    public let main_generation: Generation   // The generation this region was introduced in
    public let names: [Name]   // The name of this region listed in different languages
    public let pokedexes: [Pokedex]   // A list of pokédexes that catalogue Pokémon in this region
    public let version_groups: [VersionGroup]   // A list of version groups where this region can be visited

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        locations = try Location(decoder["locations"])
        main_generation = try Generation(decoder["main_generation"])
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        
        guard let tmpPokedexes = decoder["pokedexes"].array else { throw JSONError.WrongType }
        var collectPokedexes = [Pokedex]()
        for tmpDecoder in tmpPokedexes {
            collectPokedexes.append(try Pokedex(tmpDecoder))
        }
        pokedexes = collectPokedexes

        
        guard let tmpVersion_groups = decoder["version_groups"].array else { throw JSONError.WrongType }
        var collectVersion_groups = [VersionGroup]()
        for tmpDecoder in tmpVersion_groups {
            collectVersion_groups.append(try VersionGroup(tmpDecoder))
        }
        version_groups = collectVersion_groups

    }
}

//
// Resource Lists - Ability
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Ability : JSONJoy {
    public let id: Int   // The identifier for this ability resource
    public let name: String   // The name for this ability resource
    public let is_main_series: Bool   // Whether or not this ability originated in the main series of the video games
    public let generation: Generation   // The generation this ability originated in
    public let names: [Name]   // The name of this ability listed in different languages
    public let effect_entries: [VerboseEffect]   // The effect of this ability listed in different languages
    public let effect_changes: [AbilityEffectChange]   // The list of previous effects this ability has had across version groups
    public let flavor_text_entries: [VersionGroupFlavorText]   // The flavor text of this ability listed in different languages
    public let pokemon: [AbilityPokemon]   // A list of Pokémon that could potentially have this ability

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        is_main_series = try decoder["is_main_series"].bool
        generation = try Generation(decoder["generation"])
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        
        guard let tmpEffect_entries = decoder["effect_entries"].array else { throw JSONError.WrongType }
        var collectEffect_entries = [VerboseEffect]()
        for tmpDecoder in tmpEffect_entries {
            collectEffect_entries.append(try VerboseEffect(tmpDecoder))
        }
        effect_entries = collectEffect_entries

        
        guard let tmpEffect_changes = decoder["effect_changes"].array else { throw JSONError.WrongType }
        var collectEffect_changes = [AbilityEffectChange]()
        for tmpDecoder in tmpEffect_changes {
            collectEffect_changes.append(try AbilityEffectChange(tmpDecoder))
        }
        effect_changes = collectEffect_changes

        
        guard let tmpFlavor_text_entries = decoder["flavor_text_entries"].array else { throw JSONError.WrongType }
        var collectFlavor_text_entries = [VersionGroupFlavorText]()
        for tmpDecoder in tmpFlavor_text_entries {
            collectFlavor_text_entries.append(try VersionGroupFlavorText(tmpDecoder))
        }
        flavor_text_entries = collectFlavor_text_entries

        
        guard let tmpPokemon = decoder["pokemon"].array else { throw JSONError.WrongType }
        var collectPokemon = [AbilityPokemon]()
        for tmpDecoder in tmpPokemon {
            collectPokemon.append(try AbilityPokemon(tmpDecoder))
        }
        pokemon = collectPokemon

    }
}

//
// Resource Lists - AbilityEffectChange
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class AbilityEffectChange : JSONJoy {
    public let effect_entries: Effect   // The previous effect of this ability listed in different languages
    public let version_group: VersionGroup   // The version group in which the previous effect of this ability originated

    public required init(_ decoder: JSONDecoder) throws {
        effect_entries = try decoder["effect_entries"].Effect
        version_group = try VersionGroup(decoder["version_group"])
    }
}

//
// Resource Lists - AbilityFlavorText
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class AbilityFlavorText : JSONJoy {
    public let flavor_text: String   // The localized name for an API resource in a specific language
    public let language: Language   // The language this name is in
    public let version_group: VersionGroup   // The version group that uses this flavor text

    public required init(_ decoder: JSONDecoder) throws {
        flavor_text = try decoder["flavor_text"].getString()
        language = try Language(decoder["language"])
        version_group = try VersionGroup(decoder["version_group"])
    }
}

//
// Resource Lists - AbilityPokemon
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class AbilityPokemon : JSONJoy {
    public let is_hidden: Bool   // Whether or not this a hidden ability for the referenced Pokémon
    public let slot: Int   // Pokémon have 3 ability 'slots' which hold references to possible abilities they could have. This is the slot of this ability for the referenced pokemon.
    public let pokemon: Pokemon   // The Pokémon this ability could belong to

    public required init(_ decoder: JSONDecoder) throws {
        is_hidden = try decoder["is_hidden"].bool
        slot = try decoder["slot"].getInt()
        pokemon = try Pokemon(decoder["pokemon"])
    }
}

//
// Resource Lists - Characteristic
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Characteristic : JSONJoy {
    public let id: Int   // The identifier for this characteristic resource
    public let gene_modulo: Int   // The remainder of the highest stat/IV divided by 5
    public let possible_values: [[Int]]   // The possible values of the highest stat that would result in a Pokémon recieving this characteristic when divided by 5
    public let descriptions: [Description]   // The descriptions of this characteristic listed in different languages

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        gene_modulo = try decoder["gene_modulo"].getInt()
        
        guard let tmpPossible_values = decoder["possible_values"].array else { throw JSONError.WrongType }
        var collectPossible_values = [[Int]]()
        for tmpDecoder in tmpPossible_values {
            collectPossible_values.append(try [Int](tmpDecoder))
        }
        possible_values = collectPossible_values

        
        guard let tmpDescriptions = decoder["descriptions"].array else { throw JSONError.WrongType }
        var collectDescriptions = [Description]()
        for tmpDecoder in tmpDescriptions {
            collectDescriptions.append(try Description(tmpDecoder))
        }
        descriptions = collectDescriptions

    }
}

//
// Resource Lists - EggGroup
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class EggGroup : JSONJoy {
    public let id: Int   // The identifier for this egg group resource
    public let name: String   // The name for this egg group resource
    public let names: [Name]   // The name of this egg group listed in different languages
    public let pokemon_species: [PokemonSpecies]   // A list of all Pokémon species that are members of this egg group

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        
        guard let tmpPokemon_species = decoder["pokemon_species"].array else { throw JSONError.WrongType }
        var collectPokemon_species = [PokemonSpecies]()
        for tmpDecoder in tmpPokemon_species {
            collectPokemon_species.append(try PokemonSpecies(tmpDecoder))
        }
        pokemon_species = collectPokemon_species

    }
}

//
// Resource Lists - Gender
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Gender : JSONJoy {
    public let id: Int   // The identifier for this gender resource
    public let name: String   // The name for this gender resource
    public let pokemon_species_details: [PokemonSpeciesGender]   // A list of Pokémon species that can be this gender and how likely it is that they will be
    public let required_for_evolution: [PokemonSpecies]   // A list of Pokémon species that required this gender in order for a Pokémon to evolve into them

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpPokemon_species_details = decoder["pokemon_species_details"].array else { throw JSONError.WrongType }
        var collectPokemon_species_details = [PokemonSpeciesGender]()
        for tmpDecoder in tmpPokemon_species_details {
            collectPokemon_species_details.append(try PokemonSpeciesGender(tmpDecoder))
        }
        pokemon_species_details = collectPokemon_species_details

        
        guard let tmpRequired_for_evolution = decoder["required_for_evolution"].array else { throw JSONError.WrongType }
        var collectRequired_for_evolution = [PokemonSpecies]()
        for tmpDecoder in tmpRequired_for_evolution {
            collectRequired_for_evolution.append(try PokemonSpecies(tmpDecoder))
        }
        required_for_evolution = collectRequired_for_evolution

    }
}

//
// Resource Lists - PokemonSpeciesGender
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PokemonSpeciesGender : JSONJoy {
    public let rate: Int   // The chance of this Pokémon being female, in eighths; or -1 for genderless
    public let pokemon_species: PokemonSpecies   // A Pokémon species that can be the referenced gender

    public required init(_ decoder: JSONDecoder) throws {
        rate = try decoder["rate"].getInt()
        pokemon_species = try PokemonSpecies(decoder["pokemon_species"])
    }
}

//
// Resource Lists - GrowthRate
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class GrowthRate : JSONJoy {
    public let id: Int   // The identifier for this gender resource
    public let name: String   // The name for this gender resource
    public let formula: String   // The formula used to calculate the rate at which the Pokémon species gains level
    public let descriptions: [Description]   // The descriptions of this characteristic listed in different languages
    public let levels: [GrowthRateExperienceLevel]   // A list of levels and the amount of experienced needed to atain them based on this growth rate
    public let pokemon_species: [PokemonSpecies]   // A list of Pokémon species that gain levels at this growth rate

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        formula = try decoder["formula"].getString()
        
        guard let tmpDescriptions = decoder["descriptions"].array else { throw JSONError.WrongType }
        var collectDescriptions = [Description]()
        for tmpDecoder in tmpDescriptions {
            collectDescriptions.append(try Description(tmpDecoder))
        }
        descriptions = collectDescriptions

        
        guard let tmpLevels = decoder["levels"].array else { throw JSONError.WrongType }
        var collectLevels = [GrowthRateExperienceLevel]()
        for tmpDecoder in tmpLevels {
            collectLevels.append(try GrowthRateExperienceLevel(tmpDecoder))
        }
        levels = collectLevels

        
        guard let tmpPokemon_species = decoder["pokemon_species"].array else { throw JSONError.WrongType }
        var collectPokemon_species = [PokemonSpecies]()
        for tmpDecoder in tmpPokemon_species {
            collectPokemon_species.append(try PokemonSpecies(tmpDecoder))
        }
        pokemon_species = collectPokemon_species

    }
}

//
// Resource Lists - GrowthRateExperienceLevel
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class GrowthRateExperienceLevel : JSONJoy {
    public let level: Int   // The level gained
    public let experience: Int   // The amount of experience required to reach the referenced level

    public required init(_ decoder: JSONDecoder) throws {
        level = try decoder["level"].getInt()
        experience = try decoder["experience"].getInt()
    }
}

//
// Resource Lists - Nature
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Nature : JSONJoy {
    public let id: Int   // The identifier for this nature resource
    public let name: String   // The name for this nature resource
    public let decreased_stat: Stat   // The stat decreased by 10% in Pokémon with this nature
    public let increased_stat: Stat   // The stat increased by 10% in Pokémon with this nature
    public let hates_flavor: BerryFlavor   // The flavor hated by Pokémon with this nature
    public let likes_flavor: BerryFlavor   // The flavor liked by Pokémon with this nature
    public let pokeathlon_stat_changes: [NatureStatChange]   // A list of Pokéathlon stats this nature effects and how much it effects them
    public let move_battle_style_preferences: [MoveBattleStylePreference]   // A list of battle styles and how likely a Pokémon with this nature is to use them in the Battle Palace or Battle Tent.
    public let names: [Name]   // The name of this nature listed in different languages

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        decreased_stat = try Stat(decoder["decreased_stat"])
        increased_stat = try Stat(decoder["increased_stat"])
        hates_flavor = try BerryFlavor(decoder["hates_flavor"])
        likes_flavor = try BerryFlavor(decoder["likes_flavor"])
        
        guard let tmpPokeathlon_stat_changes = decoder["pokeathlon_stat_changes"].array else { throw JSONError.WrongType }
        var collectPokeathlon_stat_changes = [NatureStatChange]()
        for tmpDecoder in tmpPokeathlon_stat_changes {
            collectPokeathlon_stat_changes.append(try NatureStatChange(tmpDecoder))
        }
        pokeathlon_stat_changes = collectPokeathlon_stat_changes

        
        guard let tmpMove_battle_style_preferences = decoder["move_battle_style_preferences"].array else { throw JSONError.WrongType }
        var collectMove_battle_style_preferences = [MoveBattleStylePreference]()
        for tmpDecoder in tmpMove_battle_style_preferences {
            collectMove_battle_style_preferences.append(try MoveBattleStylePreference(tmpDecoder))
        }
        move_battle_style_preferences = collectMove_battle_style_preferences

        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

    }
}

//
// Resource Lists - NatureStatChange
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class NatureStatChange : JSONJoy {
    public let change: Int   // The amount of change
    public let stat: PokeathlonStat   // The stat being affected

    public required init(_ decoder: JSONDecoder) throws {
        change = try decoder["change"].getInt()
        stat = try PokeathlonStat(decoder["stat"])
    }
}

//
// Resource Lists - MoveBattleStylePreference
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class MoveBattleStylePreference : JSONJoy {
    public let low_hp_preference: Int   // Chance of using the move, in percent, if HP is under one half
    public let high_hp_preference: Int   // Chance of using the move, in percent, if HP is over one half
    public let move_battle_style: MoveBattleStyle   // The move battle style

    public required init(_ decoder: JSONDecoder) throws {
        low_hp_preference = try decoder["low_hp_preference"].getInt()
        high_hp_preference = try decoder["high_hp_preference"].getInt()
        move_battle_style = try MoveBattleStyle(decoder["move_battle_style"])
    }
}

//
// Resource Lists - PokeathlonStat
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PokeathlonStat : JSONJoy {
    public let id: Int   // The identifier for this Pokéathlon stat resource
    public let name: String   // The name for this Pokéathlon stat resource
    public let names: [Name]   // The name of this Pokéathlon stat listed in different languages
    public let affecting_natures: NaturePokeathlonStatAffectSets   // A detail of natures which affect this Pokéathlon stat positively or negatively

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        affecting_natures = try decoder["affecting_natures"].NaturePokeathlonStatAffectSets
    }
}

//
// Resource Lists - NaturePokeathlonStatAffectSets
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class NaturePokeathlonStatAffectSets : JSONJoy {
    public let increase: [NaturePokeathlonStatAffect]   // A list of natures and how they change the referenced Pokéathlon stat
    public let decrease: [NaturePokeathlonStatAffect]   // A list of natures and how they change the referenced Pokéathlon stat

    public required init(_ decoder: JSONDecoder) throws {
        
        guard let tmpIncrease = decoder["increase"].array else { throw JSONError.WrongType }
        var collectIncrease = [NaturePokeathlonStatAffect]()
        for tmpDecoder in tmpIncrease {
            collectIncrease.append(try NaturePokeathlonStatAffect(tmpDecoder))
        }
        increase = collectIncrease

        
        guard let tmpDecrease = decoder["decrease"].array else { throw JSONError.WrongType }
        var collectDecrease = [NaturePokeathlonStatAffect]()
        for tmpDecoder in tmpDecrease {
            collectDecrease.append(try NaturePokeathlonStatAffect(tmpDecoder))
        }
        decrease = collectDecrease

    }
}

//
// Resource Lists - NaturePokeathlonStatAffect
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class NaturePokeathlonStatAffect : JSONJoy {
    public let max_change: Int   // The maximum amount of change to the referenced Pokéathlon stat
    public let nature: Nature   // The nature causing the change

    public required init(_ decoder: JSONDecoder) throws {
        max_change = try decoder["max_change"].getInt()
        nature = try Nature(decoder["nature"])
    }
}

//
// Resource Lists - Pokemon
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Pokemon : JSONJoy {
    public let id: Int   // The identifier for this Pokémon resource
    public let name: String   // The name for this Pokémon resource
    public let base_experience: Int   // The base experience gained for defeating this Pokémon
    public let height: Int   // The height of this Pokémon
    public let is_default: Bool   // Set for exactly one Pokémon used as the default for each species
    public let order: Int   // Order for sorting. Almost national order, except families are grouped together.
    public let weight: Int   // The weight of this Pokémon
    public let abilities: [PokemonAbility]   // A list of abilities this Pokémon could potentially have
    public let forms: [PokemonForm]   // A list of forms this Pokémon can take on
    public let game_indices: [VersionGameIndex]   // A list of game indices relevent to Pokémon item by generation
    public let held_items: [Item]   // A list of items this Pokémon may be holding when encountered
    public let location_area_encounters: [LocationAreaEncounter]   // A list of location areas as well as encounter details pertaining to specific versions
    public let moves: [Move]   // A list of moves along with learn methods and level details pertaining to specific version groups
    public let sprites: PokemonSprites   // A set of sprites used to depict this Pokémon in the game
    public let species: PokemonSpecies   // The species this Pokémon belongs to
    public let stats: [Stat]   // A list of base stat values for this Pokémon
    public let types: [PokemonType]   // A list of details showing types this Pokémon has

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        base_experience = try decoder["base_experience"].getInt()
        height = try decoder["height"].getInt()
        is_default = try decoder["is_default"].bool
        order = try decoder["order"].getInt()
        weight = try decoder["weight"].getInt()
        
        guard let tmpAbilities = decoder["abilities"].array else { throw JSONError.WrongType }
        var collectAbilities = [PokemonAbility]()
        for tmpDecoder in tmpAbilities {
            collectAbilities.append(try PokemonAbility(tmpDecoder))
        }
        abilities = collectAbilities

        
        guard let tmpForms = decoder["forms"].array else { throw JSONError.WrongType }
        var collectForms = [PokemonForm]()
        for tmpDecoder in tmpForms {
            collectForms.append(try PokemonForm(tmpDecoder))
        }
        forms = collectForms

        
        guard let tmpGame_indices = decoder["game_indices"].array else { throw JSONError.WrongType }
        var collectGame_indices = [VersionGameIndex]()
        for tmpDecoder in tmpGame_indices {
            collectGame_indices.append(try VersionGameIndex(tmpDecoder))
        }
        game_indices = collectGame_indices

        
        guard let tmpHeld_items = decoder["held_items"].array else { throw JSONError.WrongType }
        var collectHeld_items = [Item]()
        for tmpDecoder in tmpHeld_items {
            collectHeld_items.append(try Item(tmpDecoder))
        }
        held_items = collectHeld_items

        
        guard let tmpLocation_area_encounters = decoder["location_area_encounters"].array else { throw JSONError.WrongType }
        var collectLocation_area_encounters = [LocationAreaEncounter]()
        for tmpDecoder in tmpLocation_area_encounters {
            collectLocation_area_encounters.append(try LocationAreaEncounter(tmpDecoder))
        }
        location_area_encounters = collectLocation_area_encounters

        
        guard let tmpMoves = decoder["moves"].array else { throw JSONError.WrongType }
        var collectMoves = [Move]()
        for tmpDecoder in tmpMoves {
            collectMoves.append(try Move(tmpDecoder))
        }
        moves = collectMoves

        sprites = try decoder["sprites"].PokemonSprites
        species = try PokemonSpecies(decoder["species"])
        
        guard let tmpStats = decoder["stats"].array else { throw JSONError.WrongType }
        var collectStats = [Stat]()
        for tmpDecoder in tmpStats {
            collectStats.append(try Stat(tmpDecoder))
        }
        stats = collectStats

        
        guard let tmpTypes = decoder["types"].array else { throw JSONError.WrongType }
        var collectTypes = [PokemonType]()
        for tmpDecoder in tmpTypes {
            collectTypes.append(try PokemonType(tmpDecoder))
        }
        types = collectTypes

    }
}

//
// Resource Lists - PokemonAbility
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PokemonAbility : JSONJoy {
    public let is_hidden: Bool   // Whether or not this is a hidden ability
    public let slot: Int   // The slot this ability occupies in this Pokémon species
    public let ability: Ability   // The ability the Pokémon may have

    public required init(_ decoder: JSONDecoder) throws {
        is_hidden = try decoder["is_hidden"].bool
        slot = try decoder["slot"].getInt()
        ability = try Ability(decoder["ability"])
    }
}

//
// Resource Lists - PokemonType
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PokemonType : JSONJoy {
    public let slot: Int   // The order the Pokémon's types are listed in
    public let type: String   // The type the referenced Pokémon has

    public required init(_ decoder: JSONDecoder) throws {
        slot = try decoder["slot"].getInt()
        type = try decoder["type"].getString()
    }
}

//
// Resource Lists - PokemonSprites
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PokemonSprites : JSONJoy {
    public let front_default: String   // The default depiction of this Pokémon from the front in battle
    public let front_shiny: String   // The shiny depiction of this Pokémon from the front in battle
    public let front_female: String   // The female depiction of this Pokémon from the front in battle
    public let front_shiny_female: String   // The shiny female depiction of this Pokémon from the front in battle
    public let back_default: String   // The default depiction of this Pokémon from the back in battle
    public let back_shiny: String   // The shiny depiction of this Pokémon from the back in battle
    public let back_female: String   // The female depiction of this Pokémon from the back in battle
    public let back_shiny_female: String   // The shiny female depiction of this Pokémon from the back in battle

    public required init(_ decoder: JSONDecoder) throws {
        front_default = try decoder["front_default"].getString()
        front_shiny = try decoder["front_shiny"].getString()
        front_female = try decoder["front_female"].getString()
        front_shiny_female = try decoder["front_shiny_female"].getString()
        back_default = try decoder["back_default"].getString()
        back_shiny = try decoder["back_shiny"].getString()
        back_female = try decoder["back_female"].getString()
        back_shiny_female = try decoder["back_shiny_female"].getString()
    }
}

//
// Resource Lists - LocationAreaEncounter
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class LocationAreaEncounter : JSONJoy {
    public let location_area: APIResource (LocationArea)   // The location area the referenced Pokémon can be encountered in
    public let version_details: [VersionEncounterDetail]   // A list of versions and encounters with the referenced Pokémon that might happen

    public required init(_ decoder: JSONDecoder) throws {
        location_area = try decoder["location_area"].APIResource (LocationArea)
        
        guard let tmpVersion_details = decoder["version_details"].array else { throw JSONError.WrongType }
        var collectVersion_details = [VersionEncounterDetail]()
        for tmpDecoder in tmpVersion_details {
            collectVersion_details.append(try VersionEncounterDetail(tmpDecoder))
        }
        version_details = collectVersion_details

    }
}

//
// Resource Lists - PokemonColor
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PokemonColor : JSONJoy {
    public let id: Int   // The identifier for this Pokémon color resource
    public let name: String   // The name for this Pokémon color resource
    public let names: [Name]   // The name of this Pokémon color listed in different languages
    public let pokemon_species: [PokemonSpecies]   // A list of the Pokémon species that have this color

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        
        guard let tmpPokemon_species = decoder["pokemon_species"].array else { throw JSONError.WrongType }
        var collectPokemon_species = [PokemonSpecies]()
        for tmpDecoder in tmpPokemon_species {
            collectPokemon_species.append(try PokemonSpecies(tmpDecoder))
        }
        pokemon_species = collectPokemon_species

    }
}

//
// Resource Lists - PokemonForm
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PokemonForm : JSONJoy {
    public let id: Int   // The identifier for this Pokémon form resource
    public let name: String   // The name for this Pokémon form resource
    public let order: Int   // The order in which forms should be sorted within all forms. Multiple forms may have equal order, in which case they should fall back on sorting by name.
    public let form_order: Int   // The order in which forms should be sorted within a species' forms
    public let is_default: Bool   // True for exactly one form used as the default for each Pokémon
    public let is_battle_only: Bool   // Whether or not this form can only happen during battle
    public let is_mega: Bool   // Whether or not this form requires mega evolution
    public let form_name: String   // The name of this form
    public let pokemon: Pokemon   // The Pokémon that can take on this form
    public let sprites: PokemonFormSprites   // A set of sprites used to depict this Pokémon form in the game
    public let version_group: VersionGroup   // The version group this Pokémon form was introduced in

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        order = try decoder["order"].getInt()
        form_order = try decoder["form_order"].getInt()
        is_default = try decoder["is_default"].bool
        is_battle_only = try decoder["is_battle_only"].bool
        is_mega = try decoder["is_mega"].bool
        form_name = try decoder["form_name"].getString()
        pokemon = try Pokemon(decoder["pokemon"])
        sprites = try decoder["sprites"].PokemonFormSprites
        version_group = try VersionGroup(decoder["version_group"])
    }
}

//
// Resource Lists - PokemonFormSprites
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PokemonFormSprites : JSONJoy {
    public let front_default: String   // The default depiction of this Pokémon form from the front in battle
    public let front_shiny: String   // The shiny depiction of this Pokémon form from the front in battle
    public let back_default: String   // The default depiction of this Pokémon form from the back in battle
    public let back_shiny: String   // The shiny depiction of this Pokémon form from the back in battle

    public required init(_ decoder: JSONDecoder) throws {
        front_default = try decoder["front_default"].getString()
        front_shiny = try decoder["front_shiny"].getString()
        back_default = try decoder["back_default"].getString()
        back_shiny = try decoder["back_shiny"].getString()
    }
}

//
// Resource Lists - PokemonHabitat
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PokemonHabitat : JSONJoy {
    public let id: Int   // The identifier for this Pokémon habitat resource
    public let name: String   // The name for this Pokémon habitat resource
    public let names: [Name]   // The name of this Pokémon habitat listed in different languages
    public let pokemon_species: [PokemonSpecies]   // A list of the Pokémon species that can be found in this habitat

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        
        guard let tmpPokemon_species = decoder["pokemon_species"].array else { throw JSONError.WrongType }
        var collectPokemon_species = [PokemonSpecies]()
        for tmpDecoder in tmpPokemon_species {
            collectPokemon_species.append(try PokemonSpecies(tmpDecoder))
        }
        pokemon_species = collectPokemon_species

    }
}

//
// Resource Lists - PokemonShape
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PokemonShape : JSONJoy {
    public let id: Int   // The identifier for this Pokémon shape resource
    public let name: String   // The name for this Pokémon shape resource
    public let awesome_names: [AwesomeName]   // The "scientific" name of this Pokémon shape listed in different languages
    public let names: [Name]   // The name of this Pokémon shape listed in different languages
    public let pokemon_species: [PokemonSpecies]   // A list of the Pokémon species that have this shape

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        
        guard let tmpAwesome_names = decoder["awesome_names"].array else { throw JSONError.WrongType }
        var collectAwesome_names = [AwesomeName]()
        for tmpDecoder in tmpAwesome_names {
            collectAwesome_names.append(try AwesomeName(tmpDecoder))
        }
        awesome_names = collectAwesome_names

        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        
        guard let tmpPokemon_species = decoder["pokemon_species"].array else { throw JSONError.WrongType }
        var collectPokemon_species = [PokemonSpecies]()
        for tmpDecoder in tmpPokemon_species {
            collectPokemon_species.append(try PokemonSpecies(tmpDecoder))
        }
        pokemon_species = collectPokemon_species

    }
}

//
// Resource Lists - AwesomeName
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class AwesomeName : JSONJoy {
    public let awesome_name: String   // The localized "scientific" name for an API resource in a specific language
    public let language: Language   // The language this "scientific" name is in

    public required init(_ decoder: JSONDecoder) throws {
        awesome_name = try decoder["awesome_name"].getString()
        language = try Language(decoder["language"])
    }
}

//
// Resource Lists - PokemonSpecies
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PokemonSpecies : JSONJoy {
    public let id: Int   // The identifier for this Pokémon species resource
    public let name: String   // The name for this Pokémon species resource
    public let order: Int   // The order in which species should be sorted. Based on National Dex order, except families are grouped together and sorted by stage.
    public let gender_rate: Int   // The chance of this Pokémon being female, in eighths; or -1 for genderless
    public let capture_rate: Int   // The base capture rate; up to 255. The higher the number, the easier the catch.
    public let base_happiness: Int   // The happiness when caught by a normal Pokéball; up to 255. The higher the number, the happier the Pokémon.
    public let is_baby: Bool   // Whether or not this is a baby Pokémon
    public let hatch_counter: Int   // Initial hatch counter: one must walk 255 × (hatch_counter + 1) steps before this Pokémon's egg hatches, unless utilizing bonuses like Flame Body's
    public let has_gender_differences: Bool   // Whether or not this Pokémon can have different genders
    public let forms_switchable: Bool   // Whether or not this Pokémon has multiple forms and can switch between them
    public let growth_rate: GrowthRate   // The rate at which this Pokémon species gains levels
    public let pokedex_numbers: [PokemonSpeciesDexEntry]   // A list of pokedexes and the indexes reserved within them for this Pokémon species
    public let egg_groups: [EggGroup]   // A list of egg groups this Pokémon species is a member of
    public let color: [PokemonColor]   // The color of this Pokémon for gimmicky Pokédex search
    public let shape: [PokemonShape]   // The shape of this Pokémon for gimmicky Pokédex search
    public let evolves_from_species: PokemonSpecies   // The Pokémon species that evolves into this pokemon_species
    public let evolution_chain: APIResource (EvolutionChain)   // The evolution chain this Pokémon species is a member of
    public let habitat: PokemonHabitat   // The habitat this Pokémon species can be encountered in
    public let generation: Generation   // The generation this Pokémon species was introduced in
    public let names: [Name]   // The name of this Pokémon species listed in different languages
    public let pal_park_encounters: [PalParkEncounterArea]   // A list of encounters that can be had with this Pokémon species in pal park
    public let flavor_text_entries: [PokemonSpeciesFlavorText]   // The flavor text of this flavor text listed in different languages
    public let form_descriptions: [Description]   // Descriptions of different forms Pokémon take on within the Pokémon species
    public let genera: Genus   // The genus of this Pokémon species listed in multiple languages
    public let varieties: [Pokemon]   // A list of the Pokémon that exist within this Pokémon species

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        order = try decoder["order"].getInt()
        gender_rate = try decoder["gender_rate"].getInt()
        capture_rate = try decoder["capture_rate"].getInt()
        base_happiness = try decoder["base_happiness"].getInt()
        is_baby = try decoder["is_baby"].bool
        hatch_counter = try decoder["hatch_counter"].getInt()
        has_gender_differences = try decoder["has_gender_differences"].bool
        forms_switchable = try decoder["forms_switchable"].bool
        growth_rate = try GrowthRate(decoder["growth_rate"])
        
        guard let tmpPokedex_numbers = decoder["pokedex_numbers"].array else { throw JSONError.WrongType }
        var collectPokedex_numbers = [PokemonSpeciesDexEntry]()
        for tmpDecoder in tmpPokedex_numbers {
            collectPokedex_numbers.append(try PokemonSpeciesDexEntry(tmpDecoder))
        }
        pokedex_numbers = collectPokedex_numbers

        
        guard let tmpEgg_groups = decoder["egg_groups"].array else { throw JSONError.WrongType }
        var collectEgg_groups = [EggGroup]()
        for tmpDecoder in tmpEgg_groups {
            collectEgg_groups.append(try EggGroup(tmpDecoder))
        }
        egg_groups = collectEgg_groups

        
        guard let tmpColor = decoder["color"].array else { throw JSONError.WrongType }
        var collectColor = [PokemonColor]()
        for tmpDecoder in tmpColor {
            collectColor.append(try PokemonColor(tmpDecoder))
        }
        color = collectColor

        
        guard let tmpShape = decoder["shape"].array else { throw JSONError.WrongType }
        var collectShape = [PokemonShape]()
        for tmpDecoder in tmpShape {
            collectShape.append(try PokemonShape(tmpDecoder))
        }
        shape = collectShape

        evolves_from_species = try PokemonSpecies(decoder["evolves_from_species"])
        evolution_chain = try decoder["evolution_chain"].APIResource (EvolutionChain)
        habitat = try PokemonHabitat(decoder["habitat"])
        generation = try Generation(decoder["generation"])
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        
        guard let tmpPal_park_encounters = decoder["pal_park_encounters"].array else { throw JSONError.WrongType }
        var collectPal_park_encounters = [PalParkEncounterArea]()
        for tmpDecoder in tmpPal_park_encounters {
            collectPal_park_encounters.append(try PalParkEncounterArea(tmpDecoder))
        }
        pal_park_encounters = collectPal_park_encounters

        
        guard let tmpFlavor_text_entries = decoder["flavor_text_entries"].array else { throw JSONError.WrongType }
        var collectFlavor_text_entries = [PokemonSpeciesFlavorText]()
        for tmpDecoder in tmpFlavor_text_entries {
            collectFlavor_text_entries.append(try PokemonSpeciesFlavorText(tmpDecoder))
        }
        flavor_text_entries = collectFlavor_text_entries

        
        guard let tmpForm_descriptions = decoder["form_descriptions"].array else { throw JSONError.WrongType }
        var collectForm_descriptions = [Description]()
        for tmpDecoder in tmpForm_descriptions {
            collectForm_descriptions.append(try Description(tmpDecoder))
        }
        form_descriptions = collectForm_descriptions

        genera = try decoder["genera"].Genus
        
        guard let tmpVarieties = decoder["varieties"].array else { throw JSONError.WrongType }
        var collectVarieties = [Pokemon]()
        for tmpDecoder in tmpVarieties {
            collectVarieties.append(try Pokemon(tmpDecoder))
        }
        varieties = collectVarieties

    }
}

//
// Resource Lists - Genus
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Genus : JSONJoy {
    public let genus: String   // The localized genus for the referenced pokemon species
    public let language: Language   // The language this genus is in

    public required init(_ decoder: JSONDecoder) throws {
        genus = try decoder["genus"].getString()
        language = try Language(decoder["language"])
    }
}

//
// Resource Lists - PokemonSpeciesDexEntry
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PokemonSpeciesDexEntry : JSONJoy {
    public let entry_number: Int   // The index number within the Pokédex
    public let name: Pokedex   // The Pokédex the referenced Pokémon species can be found in

    public required init(_ decoder: JSONDecoder) throws {
        entry_number = try decoder["entry_number"].getInt()
        name = try Pokedex(decoder["name"])
    }
}

//
// Resource Lists - PalParkEncounterArea
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PalParkEncounterArea : JSONJoy {
    public let base_score: Int   // The base score given to the player when the referenced Pokémon is caught during a pal park run
    public let rate: Int   // The base rate for encountering the referenced Pokémon in this pal park area
    public let area: PalParkArea   // The pal park area where this encounter happens

    public required init(_ decoder: JSONDecoder) throws {
        base_score = try decoder["base_score"].getInt()
        rate = try decoder["rate"].getInt()
        area = try PalParkArea(decoder["area"])
    }
}

//
// Resource Lists - PokemonSpeciesFlavorText
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class PokemonSpeciesFlavorText : JSONJoy {
    public let flavor_text: String   // The localized flavor text for an API resource in a specific language
    public let language: Language   // The language this name is in
    public let version: Version   // The version this flavor text entry is used in

    public required init(_ decoder: JSONDecoder) throws {
        flavor_text = try decoder["flavor_text"].getString()
        language = try Language(decoder["language"])
        version = try Version(decoder["version"])
    }
}

//
// Resource Lists - Stat
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Stat : JSONJoy {
    public let id: Int   // The identifier for this stat resource
    public let name: String   // The name for this stat resource
    public let game_index: Int   // ID the games use for this stat
    public let is_battle_only: Bool   // Whether this stat only exists within a battle
    public let affecting_moves: MoveStatAffectSets   // A detail of moves which affect this stat positively or negatively
    public let affecting_natures: NatureStatAffectSets   // A detail of natures which affect this stat positively or negatively
    public let characteristics: [Characteristic]   // A list of characteristics that are set on a Pokémon when its highest base stat is this stat
    public let move_damage_class: MoveDamageClass   // The class of damage this stat is directly related to
    public let names: [Name]   // The name of this region listed in different languages

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        game_index = try decoder["game_index"].getInt()
        is_battle_only = try decoder["is_battle_only"].bool
        affecting_moves = try decoder["affecting_moves"].MoveStatAffectSets
        affecting_natures = try decoder["affecting_natures"].NatureStatAffectSets
        
        guard let tmpCharacteristics = decoder["characteristics"].array else { throw JSONError.WrongType }
        var collectCharacteristics = [Characteristic]()
        for tmpDecoder in tmpCharacteristics {
            collectCharacteristics.append(try Characteristic(tmpDecoder))
        }
        characteristics = collectCharacteristics

        move_damage_class = try MoveDamageClass(decoder["move_damage_class"])
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

    }
}

//
// Resource Lists - MoveStatAffectSets
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class MoveStatAffectSets : JSONJoy {
    public let increase: [MoveStatAffect]   // A list of moves and how they change the referenced stat
    public let decrease: [MoveStatAffect]   // A list of moves and how they change the referenced stat

    public required init(_ decoder: JSONDecoder) throws {
        
        guard let tmpIncrease = decoder["increase"].array else { throw JSONError.WrongType }
        var collectIncrease = [MoveStatAffect]()
        for tmpDecoder in tmpIncrease {
            collectIncrease.append(try MoveStatAffect(tmpDecoder))
        }
        increase = collectIncrease

        
        guard let tmpDecrease = decoder["decrease"].array else { throw JSONError.WrongType }
        var collectDecrease = [MoveStatAffect]()
        for tmpDecoder in tmpDecrease {
            collectDecrease.append(try MoveStatAffect(tmpDecoder))
        }
        decrease = collectDecrease

    }
}

//
// Resource Lists - MoveStatAffect
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class MoveStatAffect : JSONJoy {
    public let max_change: Int   // The maximum amount of change to the referenced stat
    public let move: Move   // The move causing the change

    public required init(_ decoder: JSONDecoder) throws {
        max_change = try decoder["max_change"].getInt()
        move = try Move(decoder["move"])
    }
}

//
// Resource Lists - NatureStatAffectSets
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class NatureStatAffectSets : JSONJoy {
    public let increase: [NatureStatAffect]   // A list of natures and how they change the referenced stat
    public let decrease: [NatureStatAffect]   // A list of nature sand how they change the referenced stat

    public required init(_ decoder: JSONDecoder) throws {
        
        guard let tmpIncrease = decoder["increase"].array else { throw JSONError.WrongType }
        var collectIncrease = [NatureStatAffect]()
        for tmpDecoder in tmpIncrease {
            collectIncrease.append(try NatureStatAffect(tmpDecoder))
        }
        increase = collectIncrease

        
        guard let tmpDecrease = decoder["decrease"].array else { throw JSONError.WrongType }
        var collectDecrease = [NatureStatAffect]()
        for tmpDecoder in tmpDecrease {
            collectDecrease.append(try NatureStatAffect(tmpDecoder))
        }
        decrease = collectDecrease

    }
}

//
// Resource Lists - NatureStatAffect
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class NatureStatAffect : JSONJoy {
    public let max_change: Int   // The maximum amount of change to the referenced stat
    public let nature: Nature   // The nature causing the change

    public required init(_ decoder: JSONDecoder) throws {
        max_change = try decoder["max_change"].getInt()
        nature = try Nature(decoder["nature"])
    }
}

//
// Resource Lists - Type
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Type : JSONJoy {
    public let id: Int   // The identifier for this type resource
    public let name: String   // The name for this type resource
    public let damage_relations: TypeRelations   // A detail of how effective this type is toward others and vice versa
    public let game_indices: [GenerationGameIndex]   // A list of game indices relevent to this item by generation
    public let generation: Generation   // The generation this type was introduced in
    public let move_damage_class: MoveDamageClass   // The class of damage inflicted by this type
    public let names: [Name]   // The name of this type listed in different languages
    public let pokemon: TypePokemon   // A list of details of Pokémon that have this type
    public let moves: [Move]   // A list of moves that have this type

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        damage_relations = try decoder["damage_relations"].TypeRelations
        
        guard let tmpGame_indices = decoder["game_indices"].array else { throw JSONError.WrongType }
        var collectGame_indices = [GenerationGameIndex]()
        for tmpDecoder in tmpGame_indices {
            collectGame_indices.append(try GenerationGameIndex(tmpDecoder))
        }
        game_indices = collectGame_indices

        generation = try Generation(decoder["generation"])
        move_damage_class = try MoveDamageClass(decoder["move_damage_class"])
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

        pokemon = try decoder["pokemon"].TypePokemon
        
        guard let tmpMoves = decoder["moves"].array else { throw JSONError.WrongType }
        var collectMoves = [Move]()
        for tmpDecoder in tmpMoves {
            collectMoves.append(try Move(tmpDecoder))
        }
        moves = collectMoves

    }
}

//
// Resource Lists - TypePokemon
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class TypePokemon : JSONJoy {
    public let slot: Int   // The order the Pokémon's types are listed in
    public let pokemon: Pokemon   // The Pokémon that has the referenced type

    public required init(_ decoder: JSONDecoder) throws {
        slot = try decoder["slot"].getInt()
        pokemon = try Pokemon(decoder["pokemon"])
    }
}

//
// Resource Lists - TypeRelations
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class TypeRelations : JSONJoy {
    public let no_damage_to: [Type]   // A list of types this type has no effect on
    public let half_damage_to: [Type]   // A list of types this type is not very effect against
    public let double_damage_to: [Type]   // A list of types this type is very effect against
    public let no_damage_from: [Type]   // A list of types that have no effect on this type
    public let half_damage_from: [Type]   // A list of types that are not very effective against this type
    public let double_damage_from: [Type]   // A list of types that are very effective against this type

    public required init(_ decoder: JSONDecoder) throws {
        
        guard let tmpNo_damage_to = decoder["no_damage_to"].array else { throw JSONError.WrongType }
        var collectNo_damage_to = [Type]()
        for tmpDecoder in tmpNo_damage_to {
            collectNo_damage_to.append(try Type(tmpDecoder))
        }
        no_damage_to = collectNo_damage_to

        
        guard let tmpHalf_damage_to = decoder["half_damage_to"].array else { throw JSONError.WrongType }
        var collectHalf_damage_to = [Type]()
        for tmpDecoder in tmpHalf_damage_to {
            collectHalf_damage_to.append(try Type(tmpDecoder))
        }
        half_damage_to = collectHalf_damage_to

        
        guard let tmpDouble_damage_to = decoder["double_damage_to"].array else { throw JSONError.WrongType }
        var collectDouble_damage_to = [Type]()
        for tmpDecoder in tmpDouble_damage_to {
            collectDouble_damage_to.append(try Type(tmpDecoder))
        }
        double_damage_to = collectDouble_damage_to

        
        guard let tmpNo_damage_from = decoder["no_damage_from"].array else { throw JSONError.WrongType }
        var collectNo_damage_from = [Type]()
        for tmpDecoder in tmpNo_damage_from {
            collectNo_damage_from.append(try Type(tmpDecoder))
        }
        no_damage_from = collectNo_damage_from

        
        guard let tmpHalf_damage_from = decoder["half_damage_from"].array else { throw JSONError.WrongType }
        var collectHalf_damage_from = [Type]()
        for tmpDecoder in tmpHalf_damage_from {
            collectHalf_damage_from.append(try Type(tmpDecoder))
        }
        half_damage_from = collectHalf_damage_from

        
        guard let tmpDouble_damage_from = decoder["double_damage_from"].array else { throw JSONError.WrongType }
        var collectDouble_damage_from = [Type]()
        for tmpDecoder in tmpDouble_damage_from {
            collectDouble_damage_from.append(try Type(tmpDecoder))
        }
        double_damage_from = collectDouble_damage_from

    }
}

//
// Resource Lists - Language
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Language : JSONJoy {
    public let id: Int   // The identifier for this language resource
    public let name: String   // The name for this language resource
    public let official: Bool   // Whether or not the games are published in this language
    public let iso639: String   // The two-letter code of the country where this language is spoken. Note that it is not unique.
    public let iso3166: String   // The two-letter code of the language. Note that it is not unique.
    public let names: [Name]   // The name of this language listed in different languages

    public required init(_ decoder: JSONDecoder) throws {
        id = try decoder["id"].getInt()
        name = try decoder["name"].getString()
        official = try decoder["official"].bool
        iso639 = try decoder["iso639"].getString()
        iso3166 = try decoder["iso3166"].getString()
        
        guard let tmpNames = decoder["names"].array else { throw JSONError.WrongType }
        var collectNames = [Name]()
        for tmpDecoder in tmpNames {
            collectNames.append(try Name(tmpDecoder))
        }
        names = collectNames

    }
}

//
// Resource Lists - APIResource
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class APIResource : JSONJoy {
    public let url: String   // The URL of the referenced resource

    public required init(_ decoder: JSONDecoder) throws {
        url = try decoder["url"].getString()
    }
}

//
// Resource Lists - Description
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Description : JSONJoy {
    public let description: String   // The localized description for an API resource in a specific language
    public let language: Language   // The language this name is in

    public required init(_ decoder: JSONDecoder) throws {
        description = try decoder["description"].getString()
        language = try Language(decoder["language"])
    }
}

//
// Resource Lists - Effect
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Effect : JSONJoy {
    public let effect: String   // The localized effect text for an API resource in a specific language
    public let language: Language   // The language this effect is in

    public required init(_ decoder: JSONDecoder) throws {
        effect = try decoder["effect"].getString()
        language = try Language(decoder["language"])
    }
}

//
// Resource Lists - Encounter
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Encounter : JSONJoy {
    public let min_level: Int   // The lowest level the Pokémon could be encountered at
    public let max_level: Int   // The highest level the Pokémon could be encountered at
    public let condition_values: [EncounterConditionValue]   // A list of condition values that must be in effect for this encounter to occur
    public let chance: Int   // percent chance that this encounter will occur
    public let method: EncounterMethod   // The method by which this encounter happens

    public required init(_ decoder: JSONDecoder) throws {
        min_level = try decoder["min_level"].getInt()
        max_level = try decoder["max_level"].getInt()
        
        guard let tmpCondition_values = decoder["condition_values"].array else { throw JSONError.WrongType }
        var collectCondition_values = [EncounterConditionValue]()
        for tmpDecoder in tmpCondition_values {
            collectCondition_values.append(try EncounterConditionValue(tmpDecoder))
        }
        condition_values = collectCondition_values

        chance = try decoder["chance"].getInt()
        method = try EncounterMethod(decoder["method"])
    }
}

//
// Resource Lists - FlavorText
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class FlavorText : JSONJoy {
    public let flavor_text: String   // The localized flavor text for an API resource in a specific language
    public let language: Language   // The language this name is in

    public required init(_ decoder: JSONDecoder) throws {
        flavor_text = try decoder["flavor_text"].getString()
        language = try Language(decoder["language"])
    }
}

//
// Resource Lists - GenerationGameIndex
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class GenerationGameIndex : JSONJoy {
    public let game_index: Int   // The internal id of an API resource within game data
    public let generation: Generation   // The generation relevent to this game index

    public required init(_ decoder: JSONDecoder) throws {
        game_index = try decoder["game_index"].getInt()
        generation = try Generation(decoder["generation"])
    }
}

//
// Resource Lists - Name
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class Name : JSONJoy {
    public let name: String   // The localized name for an API resource in a specific language
    public let language: Language   // The language this name is in

    public required init(_ decoder: JSONDecoder) throws {
        name = try decoder["name"].getString()
        language = try Language(decoder["language"])
    }
}

//
// Resource Lists - NamedAPIResource
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class NamedAPIResource : JSONJoy {
    public let name: String   // The name of the referenced resource
    public let url: String   // The URL of the referenced resource

    public required init(_ decoder: JSONDecoder) throws {
        name = try decoder["name"].getString()
        url = try decoder["url"].getString()
    }
}

//
// Resource Lists - VerboseEffect
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class VerboseEffect : JSONJoy {
    public let effect: String   // The localized effect text for an API resource in a specific language
    public let short_effect: String   // The localized effect text in brief
    public let language: Language   // The language this effect is in

    public required init(_ decoder: JSONDecoder) throws {
        effect = try decoder["effect"].getString()
        short_effect = try decoder["short_effect"].getString()
        language = try Language(decoder["language"])
    }
}

//
// Resource Lists - VersionEncounterDetail
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class VersionEncounterDetail : JSONJoy {
    public let version: Version   // The game version this encounter happens in
    public let max_chance: Int   // The total percentage of all encounter potential
    public let encounter_details: [Encounter]   // A list of encounters and their specifics

    public required init(_ decoder: JSONDecoder) throws {
        version = try Version(decoder["version"])
        max_chance = try decoder["max_chance"].getInt()
        
        guard let tmpEncounter_details = decoder["encounter_details"].array else { throw JSONError.WrongType }
        var collectEncounter_details = [Encounter]()
        for tmpDecoder in tmpEncounter_details {
            collectEncounter_details.append(try Encounter(tmpDecoder))
        }
        encounter_details = collectEncounter_details

    }
}

//
// Resource Lists - VersionGameIndex
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class VersionGameIndex : JSONJoy {
    public let game_index: Int   // The internal id of an API resource within game data
    public let version: Version   // The version relevent to this game index

    public required init(_ decoder: JSONDecoder) throws {
        game_index = try decoder["game_index"].getInt()
        version = try Version(decoder["version"])
    }
}

//
// Resource Lists - VersionGroupFlavorText
// GET api/v2/{endpoint}
// Calling any API endpoint without a resource ID or name will return a paginated list of available resources for that API. By default, a list 'page' will contain up to 20 resources. If you would like to change this just add a 'limit' query param, e.g. limit=60.
//
// 
//
//
public class VersionGroupFlavorText : JSONJoy {
    public let text: String   // The localized name for an API resource in a specific language
    public let language: Language   // The language this name is in
    public let version_group: VersionGroup   // The version group which uses this flavor text

    public required init(_ decoder: JSONDecoder) throws {
        text = try decoder["text"].getString()
        language = try Language(decoder["language"])
        version_group = try VersionGroup(decoder["version_group"])
    }
}
















































